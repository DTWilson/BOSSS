[{"path":"https://dtwilson.github.io/BOSSS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Duncan Wilson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dtwilson.github.io/BOSSS/articles/BOSSS.html","id":"problem","dir":"Articles","previous_headings":"","what":"Problem","title":"BOSSS","text":"first ingredient BOSSS problem simulation function. arguments function must first specify design variables want vary problem, followed model parameters. example two design variables representing number clusters arm, number participants arm. model parameters mean difference outcome control experimental arms (beta_1), within-cluster variance (var_e), -cluster variance (var_u). Note inputs require defaults provided. element interface simulation function must conform return value, named vector quantities ’s mean values want estimate using Monte Carlo method. , one quantity: boolean indicator negative decision, s. problem just interested expected value s; also want minimise number clusters number participants. Since fixed quantities given design, evaluate separate deterministic function. conform principles simulation function, inputs, allowing different named outputs. , outputs just m, N = n*m: Next, need note ranges design variables plan search . use design_space() function , specifying lower upper limits design variables order appear simulation function arguments: Note function automatically retrieves names design variables based order take simulation function. also need specify hypotheses ’re planning simulate , using hypotheses() function, specifying order parameters appear simulation function argument. need one hypothesis , alternative, since estimating type II error rate. Constraints specified using constraints function. constraint named, defined respect specific output specific hypothesis. nominal maximum value, probability delta used judge satisfied. , constraint mean simulation output (.e. probability negative result) alt hypothesis less equal 0.2 probability least 0.95. Finally, note whether constraint output binary otherwise. final ingredient problem set objectives want minimise. Similar constraints, objectives tied specific output hypothesis. also specify weights objective help guide internal optimisation process, note whether output objective binary continuous. example, want minimise number patients N number clusters m, latter carrying weight 100 times former. now put simulation function set data frames together create object class BOSSS_problem.","code":"sim_cRCT <- function(design = list(m = 10, n = 20),                       hypothesis = list(beta_1 = 0.3, var_e = 0.95, var_u = 0.05)){      m <- design[[1]]; n <- design[[2]]   beta_1 <- hypothesis[[1]]; var_e <- hypothesis[[2]]; var_u <- hypothesis[[3]]      m <- floor(m); n <- floor(n)      x <- rep(c(0,1), each = m)    y <- rnorm(2*m, 0, sqrt(var_u + var_e/n))   y <- y + x*beta_1    s <- t.test(y[x==1], y[x==0], alternative = \"greater\")$p.value > 0.025    return(c(s = s)) }  # For example, sim_cRCT() det_cRCT <- function(design = list(m = 10, n = 20),                       hypothesis = list(beta_1 = 0.3, var_e = 0.95, var_u = 0.05)) {   m <- design[[1]]; n <- design[[2]]   beta_1 <- hypothesis[[1]]; var_e <- hypothesis[[2]]; var_u <- hypothesis[[3]]      return(c(m = floor(m), N = floor(n)*floor(m))) } design_space <- design_space(lower = c(10, 5),                               upper = c(50, 20),                              sim = sim_cRCT)  design_space hypotheses <- hypotheses(values = matrix(c(0.3, 0.95, 0.05), ncol = 1),                          hyp_names = c(\"alt\"),                          sim = sim_cRCT)  hypotheses constraints <- constraints(name = c(\"con_tII\"),                    out = c(\"s\"),                    hyp = c(\"alt\"),                    nom = c(0.2),                    delta = c(0.95),                    binary = c(TRUE))  constraints objectives <- objectives(name = c(\"N\", \"m\"),                  out = c(\"N\", \"m\"),                  hyp = c(\"alt\", \"alt\"),                  weight = c(1, 10),                  binary = c(FALSE, FALSE))  objectives prob <- BOSSS_problem(sim_cRCT, design_space, hypotheses, objectives, constraints, det_func = det_cRCT)"},{"path":"https://dtwilson.github.io/BOSSS/articles/BOSSS.html","id":"initialisation","dir":"Articles","previous_headings":"","what":"Initialisation","title":"BOSSS","text":"set problem, now need create initial solution . involves setting space-filling set designs spanning design space (size number designs), computing Monte Carlo estimates expectations interested designs (using N samples evaluation), fitting Gaussian Process models estimates, using models estimate Pareto set front:  print() function give table Pareto set associated objective function values. plot() function plot Pareto front.","code":"set.seed(9823579)  size <- 20 N <- 100  sol <- BOSSS_solution(size, N, prob) print(sol)  #> Design variables for the Pareto set:  #>  #>        m        n #> 2  40.00  8.75000 #> 19 23.75 15.78125 #>  #> Corresponding objective function values... #>  #>    N, alt (mean) m, alt (mean) #> 2            320            40 #> 19           345            23 #>  #> ...and constraint function values: #>  #>    s, alt (mean) s, alt (var) #> 2      -2.419826    0.1333284 #> 19     -1.442005    0.0646562 plot(sol) sol_init <- sol"},{"path":"https://dtwilson.github.io/BOSSS/articles/BOSSS.html","id":"iteration","dir":"Articles","previous_headings":"","what":"Iteration","title":"BOSSS","text":"can now start improving solution calling iterate() function. call uses fitted Gaussian Process models decide next design evaluated, computes Monte Carlo estimates point, updates estimated Pareto set front.  can compare initial final approximations Pareto front actual front since, simple example, can calculate power analytically:","code":"N <- 100 for(i in 1:20) {   sol <- iterate(sol, prob, N)  } print(sol) #> Design variables for the Pareto set:  #>  #>           m         n #> 19 23.75000 15.781250 #> 23 26.99935 11.997542 #> 26 20.99972 19.999855 #> 29 24.97515 13.999811 #> 31 32.99968  8.999911 #> 33 27.95746 10.990021 #> 34 36.93869  7.994242 #> 36 22.97379 16.990697 #> 40 21.99923 17.975259 #>  #> Corresponding objective function values... #>  #>    N, alt (mean) m, alt (mean) #> 19           345            23 #> 23           286            26 #> 26           380            20 #> 29           312            24 #> 31           256            32 #> 33           270            27 #> 34           252            36 #> 36           352            22 #> 40           357            21 #>  #> ...and constraint function values: #>  #>    s, alt (mean) s, alt (var) #> 19     -1.442005   0.06465620 #> 23     -1.507734   0.06737895 #> 26     -1.259177   0.05806410 #> 29     -1.648184   0.07389930 #> 31     -1.507734   0.06737895 #> 33     -1.317975   0.06003526 #> 34     -1.202247   0.05628104 #> 36     -1.576338   0.07043940 #> 40     -1.978171   0.09367830 plot(sol) sol_final <- sol"},{"path":"https://dtwilson.github.io/BOSSS/articles/BOSSS.html","id":"diagnostics","dir":"Articles","previous_headings":"","what":"Diagnostics","title":"BOSSS","text":"check GP models giving sensible predictions, can choose specific design plot predictions model along range design variable.   can also get predicted values 95% credible intervals point evaluated, contrasting empirical MC estimate interval. return data frame models, named according output-hypothesis combination defines . highlight * points two intervals overlap. example see empirical estimates agree predictions designs evaluated. happy solution chosen specific design Pareto set, might want double check point running large number simulations : point, especially initialisation, may decide need points initial evaluations, simulations points evaluated far. example, suppose started 10 evaluations 6 initial designs:    diagnostic plots show GP model true power function just constant, know true. see poor initial fit like might want add simulations designs already evaluated, add designs, . can use extend_initial() function . example, suppose want extra 4 designs every design 500 simulations:   plots now suggest plausible model.","code":"# Pick a specific design from the Pareto set design <- sol$p_set[1,]  ps <- diag_plots(design, prob, sol)  ps[[1]] #ggsave(here(\"man\", \"figures\", \"cRCT_diag_m.pdf\"), height=8, width=8, units=\"cm\")  ps[[2]] #ggsave(here(\"man\", \"figures\", \"cRCT_diag_n.pdf\"), height=8, width=8, units=\"cm\") diag_predictions(prob, sol) #> $`Output: s, hypothesis: alt` #>           m         n    MC_mean      MC_l95     MC_u95     p_mean      p_l95 #> 1  30.00000 12.500000 0.11155378 0.063118649 0.18963338 0.12762251 0.10772147 #> 2  40.00000  8.750000 0.08167331 0.041666820 0.15392252 0.13890888 0.11684352 #> 3  20.00000 16.250000 0.21115538 0.142069426 0.30201037 0.22166509 0.19147619 #> 4  25.00000 10.625000 0.18127490 0.117482371 0.26914262 0.22750507 0.19918432 #> 5  45.00000 18.125000 0.01195219 0.001988476 0.06841874 0.02556474 0.01226616 #> 6  35.00000  6.875000 0.23107570 0.158794949 0.32360083 0.23138686 0.20070363 #> 7  15.00000 14.375000 0.44023904 0.346374267 0.53858093 0.35342547 0.30492322 #> 8  17.50000  9.687500 0.40039841 0.309210032 0.49905109 0.38829725 0.33317646 #> 9  37.50000 17.187500 0.06175299 0.028329144 0.12936153 0.04308112 0.02818094 #> 10 47.50000  5.937500 0.20119522 0.133803478 0.29112177 0.19624201 0.14331310 #> 11 27.50000 13.437500 0.11155378 0.063118649 0.18963338 0.13983730 0.11872020 #> 12 22.50000  7.812500 0.37051793 0.281742889 0.46900021 0.35198590 0.29843680 #> 13 42.50000 15.312500 0.03187251 0.010672159 0.09130098 0.03995067 0.02444646 #> 14 32.50000 11.562500 0.10159363 0.055809001 0.17786349 0.12213350 0.10254115 #> 15 12.50000 19.062500 0.35059761 0.263632739 0.44876675 0.35459382 0.28675581 #> 16 13.75000 12.031250 0.35059761 0.263632739 0.44876675 0.41355431 0.35217076 #> 17 33.75000 19.531250 0.02191235 0.005838964 0.07872833 0.04749012 0.03065901 #> 18 43.75000  8.281250 0.12151394 0.070564158 0.20128432 0.13509492 0.10727229 #> 19 23.75000 15.781250 0.19123506 0.125606506 0.28016698 0.16106173 0.13743118 #> 20 28.75000  6.406250 0.28087649 0.201616667 0.37659748 0.30993552 0.25660633 #> 21 31.98561  8.998203 0.18127490 0.117482371 0.26914262 0.18663142 0.16437288 #> 22 21.99748 19.995216 0.17131474 0.109435453 0.25804488 0.15091308 0.12657099 #> 23 26.99935 11.997542 0.18127490 0.117482371 0.26914262 0.16935818 0.14637433 #> 24 21.99730 19.976786 0.12151394 0.070564158 0.20128432 0.15103828 0.12678562 #> 25 39.97274  6.988479 0.14143426 0.085811927 0.22426578 0.19393465 0.16840712 #> 26 20.99972 19.999855 0.22111554 0.150400931 0.31283581 0.16720993 0.14127366 #> 27 37.99189  6.993664 0.23107570 0.158794949 0.32360083 0.20584294 0.18005862 #> 28 39.99514  6.998776 0.18127490 0.117482371 0.26914262 0.19344642 0.16798199 #> 29 24.97515 13.999811 0.16135458 0.101470755 0.24686949 0.16480626 0.14107123 #> 30 39.99366  6.999902 0.26095618 0.184326258 0.35555664 0.19341562 0.16795954 #> 31 32.99968  8.999911 0.18127490 0.117482371 0.26914262 0.17763129 0.15617459 #> 32 35.95488  7.996821 0.19123506 0.125606506 0.28016698 0.18555315 0.16397734 #> 33 27.95746 10.990021 0.21115538 0.142069426 0.30201037 0.17805154 0.15493518 #> 34 36.93869  7.994242 0.23107570 0.158794949 0.32360083 0.17893502 0.15774364 #> 35 20.99066 19.995778 0.19123506 0.125606506 0.28016698 0.16739322 0.14146170 #> 36 22.97379 16.990697 0.17131474 0.109435453 0.25804488 0.16039072 0.13758832 #> 37 30.91326  9.949006 0.15139442 0.093594026 0.23561162 0.17071928 0.14900537 #> 38 20.99732 19.985637 0.12151394 0.070564158 0.20128432 0.16735196 0.14148721 #> 39 20.99805 19.995083 0.14143426 0.085811927 0.22426578 0.16727238 0.14135857 #> 40 21.99923 17.975259 0.12151394 0.070564158 0.20128432 0.16681275 0.14450253 #>         p_u95 no_overlap #> 1  0.15057972            #> 2  0.16436568            #> 3  0.25511186            #> 4  0.25855250            #> 5  0.05251463            #> 6  0.26520450            #> 7  0.40514579            #> 8  0.44643203            #> 9  0.06532988            #> 10 0.26272398            #> 11 0.16401151            #> 12 0.40953454            #> 13 0.06463631            #> 14 0.14486506            #> 15 0.42883130            #> 16 0.47774684            #> 17 0.07286656            #> 18 0.16876955            #> 19 0.18787045            #> 20 0.36884873            #> 21 0.21114250            #> 22 0.17897734            #> 23 0.19512602            #> 24 0.17897931            #> 25 0.22229731            #> 26 0.19681647            #> 27 0.23426463            #> 28 0.22174224            #> 29 0.19164367            #> 30 0.22170181            #> 31 0.20133254            #> 32 0.20925728            #> 33 0.20378516            #> 34 0.20228952            #> 35 0.19698761            #> 36 0.18615643            #> 37 0.19487286            #> 38 0.19686073            #> 39 0.19684762            #> 40 0.19179528 design <- sol$p_set[1,] r <- diag_check_point(design, prob, sol, N=10^4)  #> Model 1 prediction interval: [0.137, 0.188] #> Model 1 empirical interval: [0.151, 0.165] set.seed(98579)  size <- 6 N <- 10  sol <- BOSSS_solution(size, N, prob) #> Checking simulation speed... #> Initialisation will take approximately 0.0158143 secs  #> Solution found  print(sol)  #> Design variables for the Pareto set:  #>  #>    m      n #> 3 20 16.250 #> 4 25 10.625 #> 6 35  6.875 #>  #> Corresponding objective function values... #>  #>   N, alt (mean) m, alt (mean) #> 3           320            20 #> 4           250            25 #> 6           210            35 #>  #> ...and constraint function values: #>  #>   s, alt (mean) s, alt (var) #> 3    -1.3156768    0.5995565 #> 4    -1.3156768    0.5995565 #> 6    -0.3894648    0.4153610 plot(sol) sol_init <- sol  # Take the first solution in the Pareto set and plot diagnostics: sol$p_set[1,] #>    m     n   N  m #> 3 20 16.25 320 20 diag_plots(design, prob, sol) #> [[1]] #>  #> [[2]] sol <- extend_initial(prob, sol, extra_points = 4, extra_N = 490)  sol$p_set[1,] #>       m      n   N  m #> 10 47.5 5.9375 235 47 diag_plots(design, prob, sol) #> [[1]] #>  #> [[2]]"},{"path":"https://dtwilson.github.io/BOSSS/articles/Examples.html","id":"nifty","dir":"Articles","previous_headings":"","what":"NIFTy","title":"Examples","text":"NIFTy trial open people total thyroid surgery aimed find whether using near-infrared fluorescence imaging reduce number people whose parathyroid glands become damaged thyroid surgery. adaptive design interim analysis based (binary) short-term outcome, final analysis based (, binary) long-term outcome. design problem choose sample size decision rule inerim final analysis. analyses used χ2\\chi^2 test, decision rule expressed nominal α\\alpha used stage. simulation function, exactly provided trial statistician except small adjustments arguments return values conform BOSSS standards. can construct BOSSS problem object follows: implies going search space sample sizes decision criteria, looking trial designs simultaneously minimise type error rate (\"TI\"), type II error rate (\"TII\") expected sample size (\"EN\"), subject type error rate (probably) less 0.1 (\"TI_con\") type II error rate (probably) less 0.2 (\"TIIcon\"). Now initialise get initial estimate Pareto front:  Finally, iterate times improve initial approximation:  set efficient solutions, suppose judge number 49 offer best trade-offs. Checking design gives: confirms specific design well within two constraints, also suggests three GP models fitting simulated data well.","code":"#n is the total sample size #ninterim is the number of patients at the interim analysis (proportion) #ainterim is alpha at interim analysis (threshold p-value at interim analysis) #afinal is alpha at final analaysis (threshold p-value for 2nd and final analysis) #this means overall alpha for the trial is ainterim*afinal # #pcontshort is the probability of 1 day PoSH in the control arm #pexpshort is the probability of 1 day PoSH in the experimental arm #pcontlong is the probability of 6 month PoSH in the control arm #pexplong is the probability of 6 month PoSH in the experimental arm #p01_relative is s.t. p01_relative*pexplong = probability of having  # a long term outcome after no short term outcome  sim_trial <- function(design = list(n = 300, ninterim = 0.5, ainterim = 0.4, afinal = 0.1),                       hypothesis = list(pcontshort = 0.25, pexpshort = 0.125,                       pcontlong = 0.1, pexplong = 0.03, p01_relative = 0)) {   n <- design[[1]]; ninterim <- design[[2]]   ainterim <- design[[3]]; afinal <- design[[4]]      pcontshort <- hypothesis[[1]]; pexpshort <- hypothesis[[2]]   pcontlong <- hypothesis[[3]]; pexplong <- hypothesis[[4]]; p01_relative <- hypothesis[[5]]      ninterim <- floor(ninterim*n)      patients<-c(1:n) #create patients      treat<- rep(c(1,2), ceiling(n/2))[1:n]      n_cont <- sum(treat == 1)      short<-rep(0,n) #short term outcome   long<-rep(0,n) #long term outcome      data<-data.frame(patients,treat,short,long) #combine into dataset      #generate result 1/0 for short term outcome. If short term outcome=0 then long term outcome=0   #If short term outcome=1 then long term outcome has probability pcontlong/pcontshort   #repeat for treatment=2   # for(i in 1:n){   #   if(treat[i]==1){   #     data$short[i]<-rbinom(1,1,pcontshort)   #     if(data$short[i]==0){   #       data$long[i]<-0   #     }   #     if(data$short[i]==1){   #       data$long[i]<-rbinom(1,1,pcontlong/pcontshort)   #     }   #   }   #   else{   #     data$short[i]<-rbinom(1,1,pexpshort)   #     if(data$short[i]==0){   #       data$long[i]<-0   #     }   #     if(data$short[i]==1){   #       data$long[i]<-rbinom(1,1,pexplong/pexpshort)   #     }   #   }   # }      # An alternative and more general parametersation of the above model   # to allow different values of probability of a long outcome after   # no short outcome (previously hard coded as 0)    # probability vector p00, p01, p10, p11 in (short, long) form   # Control arm:   p01 <- p01_relative*pcontlong   p11 <- pcontlong - p01   p10 <- pcontshort - p11   # Simulate outcomes in multinomial format   cont_count <- rmultinom(1, n_cont, c((1 - p01 - p10 - p11), p01, p10, p11))   # Translate these to short and long outcomes   cont_out <- matrix(c(rep(c(0,0), cont_count[1]),                        rep(c(0,1), cont_count[2]),                        rep(c(1,0), cont_count[3]),                        rep(c(1,1), cont_count[4])), ncol = 2, byrow = TRUE)   # shuffle the list randomly   cont_out <- cont_out[sample(1:nrow(cont_out)),]      # Experimental arm:     # Control arm:   p01 <- p01_relative*pexplong   p11 <- pexplong - p01   p10 <- pexpshort - p11   exp_count <- rmultinom(1, n - n_cont, c((1 - p01 - p10 - p11), p01, p10, p11))   exp_out <- matrix(c(rep(c(0,0), exp_count[1]),                        rep(c(0,1), exp_count[2]),                        rep(c(1,0), exp_count[3]),                        rep(c(1,1), exp_count[4])), ncol = 2, byrow = TRUE)   exp_out <- exp_out[sample(1:nrow(exp_out)),]      data[data$treat == 1, c(\"short\", \"long\")] <- cont_out   data[data$treat == 2, c(\"short\", \"long\")] <- exp_out      #perform chi squared test on short term outcome for 1st ninterim patients   data2<-data[1:ninterim,]   tbl<-table(data2$short,data2$treat)   test<- suppressWarnings(chisq.test(tbl)$p.value) #get p-value      #if p<ainterim, perform chi squared test on long term outcome for all patients   if(test<ainterim){     tbl2<-table(data$long,data$treat)     test2<- suppressWarnings(chisq.test(tbl2)$p.value)   }      #if p>ainterim, trial unsuccessful at interim and final analysis   #if p<ainterim, trial successful at interim:   #if p2>afinal, trial unsuccessful at final analysis   #if p2<afinal, trial successful at final analysis   if(test>=ainterim){     return(c(g = FALSE, s = TRUE, n = ninterim))   }   if(test<ainterim){     if(mean(data2[data2$treat == 1,\"short\"]) < mean(data2[data2$treat == 2,\"short\"])){       return(c(g = FALSE, s = TRUE, n = ninterim))     } else {       if(test2>afinal){         return(c(g = FALSE, s = TRUE, n = n))       }       if(test2<afinal){         return(c(g = TRUE, s = FALSE, n = n))       }     }   } }  # For example, sim_trial() # Problem specification design_space <- design_space(lower = c(300,0.05,0,0),                               upper = c(700,0.5,1,1),                              sim = sim_trial)  hypotheses <- hypotheses(values = matrix(c(0.25, 0.25, 0.1, 0.1, 0,                                             0.25, 0.125, 0.1, 0.03, 0), ncol = 2),                          hyp_names = c(\"null\", \"alt\"),                          sim = sim_trial)  constraints <- constraints(name = c(\"TI_con\", \"TII_con\"),                    out = c(\"g\", \"s\"),                    hyp = c(\"null\", \"alt\"),                    nom = c(0.1, 0.2),                    delta =c(0.95, 0.95),                    binary = c(TRUE, TRUE))  objectives <- objectives(name = c(\"TI\", \"TII\", \"EN\"),                  out = c(\"g\", \"s\", \"n\"),                  hyp = c(\"null\", \"alt\", \"null\"),                  weight = c(100, 100, 1),                  binary = c(TRUE, TRUE, FALSE))  prob <- BOSSS_problem(sim_trial, design_space, hypotheses, objectives, constraints) set.seed(987953021)  # Initialisation size <- 40 N <- 500  ptm <- proc.time() sol <- BOSSS_solution(size, N, prob) proc.time() - ptm print(sol)  #> Design variables for the Pareto set:  #>  #>         n  ninterim ainterim   afinal #> 2  600.00 0.1625000 0.750000 0.250000 #> 9  575.00 0.4156250 0.812500 0.187500 #> 13 625.00 0.3593750 0.437500 0.062500 #> 15 325.00 0.4718750 0.687500 0.312500 #> 22 587.50 0.2046875 0.718750 0.031250 #> 27 462.50 0.4578125 0.781250 0.093750 #> 35 418.75 0.2820313 0.859375 0.328125 #> 37 668.75 0.3382812 0.734375 0.203125 #> 39 368.75 0.4507813 0.484375 0.453125 #>  #> Corresponding objective function values... #>  #>    g, null (mean) g, null (var) s, alt (mean) s, alt (var) n, null (mean) #> 2       -2.895870    0.04030898     -1.626804   0.01456830       245.8880 #> 9       -2.581421    0.03058315     -3.463266   0.06790476       362.6900 #> 13      -4.378391    0.16344445     -1.898346   0.01764933       297.7840 #> 15      -2.856301    0.03890908     -1.671131   0.01501243       197.0320 #> 22      -4.556303    0.19448254     -1.461425   0.01308801       269.6000 #> 27      -4.094751    0.12408210     -2.150157   0.02140535       284.9410 #> 35      -2.309640    0.02434019     -2.334207   0.02483631       225.6685 #> 37      -2.856301    0.03890908     -3.276937   0.05706450       349.0845 #> 39      -2.359280    0.02535564     -1.863526   0.01720311       207.7665 #>    n, null (var) #> 2      105.65737 #> 9       53.05197 #> 13      48.38338 #> 15      11.29196 #> 22      95.30629 #> 27      26.31040 #> 35      41.66091 #> 37      78.84944 #> 39      13.47438 #>  #> ...and constraint function values: #>  #>    g, null (mean) g, null (var) s, alt (mean) s, alt (var) #> 2       -2.895870    0.04030898     -1.626804   0.01456830 #> 9       -2.581421    0.03058315     -3.463266   0.06790476 #> 13      -4.378391    0.16344445     -1.898346   0.01764933 #> 15      -2.856301    0.03890908     -1.671131   0.01501243 #> 22      -4.556303    0.19448254     -1.461425   0.01308801 #> 27      -4.094751    0.12408210     -2.150157   0.02140535 #> 35      -2.309640    0.02434019     -2.334207   0.02483631 #> 37      -2.856301    0.03890908     -3.276937   0.05706450 #> 39      -2.359280    0.02535564     -1.863526   0.01720311 plot(sol) # Iterations ptm <- proc.time() N <- 500 for(i in 1:20) {   sol <- iterate(sol, prob, N)  } proc.time() - ptm print(sol) #> Design variables for the Pareto set:  #>  #>           n  ninterim   ainterim     afinal #> 9  575.0000 0.4156250 0.81250000 0.18750000 #> 13 625.0000 0.3593750 0.43750000 0.06250000 #> 15 325.0000 0.4718750 0.68750000 0.31250000 #> 27 462.5000 0.4578125 0.78125000 0.09375000 #> 37 668.7500 0.3382812 0.73437500 0.20312500 #> 39 368.7500 0.4507813 0.48437500 0.45312500 #> 42 693.5662 0.4949120 0.27456863 0.02329762 #> 43 698.4236 0.4747349 0.72489771 0.12223652 #> 45 691.9437 0.4645113 0.73323696 0.27106134 #> 46 450.3917 0.3152930 0.66498311 0.12892175 #> 47 469.9705 0.3903419 0.72850417 0.28434527 #> 48 392.7671 0.2651745 0.71856545 0.29197172 #> 49 437.7276 0.3502485 0.69773093 0.26460208 #> 51 546.2313 0.4977586 0.41949884 0.20778485 #> 53 699.0088 0.4991350 0.33036663 0.11854772 #> 54 348.5348 0.3229493 0.71953816 0.33433016 #> 55 699.3476 0.4948859 0.05700285 0.09839968 #> 56 698.5863 0.4972386 0.20772586 0.08912535 #> 57 698.6434 0.2916672 0.31607825 0.10865194 #> 58 504.1285 0.4338548 0.66805138 0.32772313 #> 59 462.4255 0.2831918 0.58560022 0.14097364 #> 60 691.7141 0.4942135 0.49990569 0.13285708 #>  #> Corresponding objective function values... #>  #>    g, null (mean) g, null (var) s, alt (mean) s, alt (var) n, null (mean) #> 9       -2.581421    0.03058315     -3.463266   0.06790476       362.6900 #> 13      -4.378391    0.16344445     -1.898346   0.01764933       297.7840 #> 15      -2.856301    0.03890908     -1.671131   0.01501243       197.0320 #> 27      -4.094751    0.12408210     -2.150157   0.02140535       284.9410 #> 37      -2.856301    0.03890908     -3.276937   0.05706450       349.0845 #> 39      -2.359280    0.02535564     -1.863526   0.01720311       207.7665 #> 42      -7.824446    5.00600080     -2.047467   0.01975463       387.1713 #> 43      -3.276937    0.05706450     -3.397487   0.06384469       447.1059 #> 45      -2.745316    0.03526753     -4.226834   0.14102920       436.7344 #> 46      -3.689289    0.08408277     -1.716844   0.01549312       216.6308 #> 47      -2.437794    0.02707023     -2.521850   0.02906385       270.8130 #> 48      -2.644208    0.03228670     -1.641433   0.01471253       185.4323 #> 49      -2.936892    0.04182035     -1.898346   0.01764933       222.4735 #> 51      -3.335521    0.06025724     -2.411048   0.02647070       329.3490 #> 53      -3.689289    0.08408277     -3.335521   0.06025724       392.2271 #> 54      -2.411048    0.02647070     -1.656207   0.01486053       176.8105 #> 55      -6.030685    0.83600481     -1.583759   0.01415688       355.8937 #> 56      -4.378391    0.16344445     -2.493162   0.02836425       376.5333 #> 57      -4.771895    0.24030264     -1.780150   0.01619872       269.4162 #> 58      -2.285558    0.02386577     -3.118117   0.04929603       300.9773 #> 59      -3.533378    0.07253729     -1.569679   0.01402643       215.7658 #> 60      -3.608458    0.07787237     -3.335521   0.06025724       410.4414 #>    n, null (var) #> 9      53.051972 #> 13     48.383377 #> 15     11.291958 #> 27     26.310401 #> 37     78.849435 #> 39     13.474383 #> 42     27.121986 #> 43     58.475890 #> 45     59.191370 #> 46     34.961456 #> 47     35.047317 #> 48     33.835167 #> 49     29.968867 #> 51     25.360469 #> 53     27.190516 #> 54     22.303688 #> 55      6.809701 #> 56     19.060671 #> 57     57.129542 #> 58     33.781442 #> 59     42.394723 #> 60     39.142223 #>  #> ...and constraint function values: #>  #>    g, null (mean) g, null (var) s, alt (mean) s, alt (var) #> 9       -2.581421    0.03058315     -3.463266   0.06790476 #> 13      -4.378391    0.16344445     -1.898346   0.01764933 #> 15      -2.856301    0.03890908     -1.671131   0.01501243 #> 27      -4.094751    0.12408210     -2.150157   0.02140535 #> 37      -2.856301    0.03890908     -3.276937   0.05706450 #> 39      -2.359280    0.02535564     -1.863526   0.01720311 #> 42      -7.824446    5.00600080     -2.047467   0.01975463 #> 43      -3.276937    0.05706450     -3.397487   0.06384469 #> 45      -2.745316    0.03526753     -4.226834   0.14102920 #> 46      -3.689289    0.08408277     -1.716844   0.01549312 #> 47      -2.437794    0.02707023     -2.521850   0.02906385 #> 48      -2.644208    0.03228670     -1.641433   0.01471253 #> 49      -2.936892    0.04182035     -1.898346   0.01764933 #> 51      -3.335521    0.06025724     -2.411048   0.02647070 #> 53      -3.689289    0.08408277     -3.335521   0.06025724 #> 54      -2.411048    0.02647070     -1.656207   0.01486053 #> 55      -6.030685    0.83600481     -1.583759   0.01415688 #> 56      -4.378391    0.16344445     -2.493162   0.02836425 #> 57      -4.771895    0.24030264     -1.780150   0.01619872 #> 58      -2.285558    0.02386577     -3.118117   0.04929603 #> 59      -3.533378    0.07253729     -1.569679   0.01402643 #> 60      -3.608458    0.07787237     -3.335521   0.06025724  p <- PS_empirical_ests(sol, prob)[[1]][, c(1,3,5)] p[,1] <- 1/(1 + exp(-p[,1])) p[,2] <- 1/(1 + exp(-p[,2]))  df <- cbind(sol$p_set[,1:4], p)  df <- df[order(df[,1]),]    colnames(df) <- c(\"$n$\", \"$n_{int}$\", \"$\\\\alpha_{int}$\", \"$\\\\alpha_{f}$\",                        \"$E[g ~|~ H_0]$\", \"$E[s ~|~ H_1]$\", \"$E[N ~|~ H_0]$\")  #print(xtable(df, digits = c(0,0,2,2,2,2,2,0)), booktabs = T, include.rownames = T, sanitize.text.function = function(x) {x}, floating = F, file = here(\"man\", \"tables\", \"NIFTy.txt\"))  plot(sol) #ggsave(here(\"man\", \"figures\", \"NIFTy.pdf\"), height=9, width=14, units=\"cm\") design <- sol$p_set[row.names(sol$p_set) == 49,]  r <- diag_check_point(design, prob, sol, N=10^5)   # Model 1 prediction interval: [0.052, 0.066] # Model 1 empirical interval: [0.06, 0.063]  # Model 2 prediction interval: [0.101, 0.13] # Model 2 empirical interval: [0.109, 0.113]  # Model 3 prediction interval: [224.613, 233.95] # Model 3 empirical interval: [230.007, 231.58]"},{"path":"https://dtwilson.github.io/BOSSS/articles/Examples.html","id":"pressure-2","dir":"Articles","previous_headings":"","what":"PRESSURE 2","title":"Examples","text":"PRESSURE 2 trial comparing different mattresses terms ability prevent development pressure ulcers, longitudinal data collected patient. Smith et al. (2021) suggested one way analyse data multi-state model, showed simulation used estimate power analysis. Herw extend approach searching optimal design. simulation deterministic functions : now construct problem encode want search total number patients, total number assessments assessment frequency. looking designs minimise numbers pattens assessments, whilst constraining type II error rate (probably) less 0.2 follow-length less 200.","code":"sim_P2 <- function(design = list(n = 500, fu = 60, af = 1),                     hypothesis = list(q12 = 0.05, q23 = 0.05, q34 = 0.03,                                       b12 = 0.67, b23 = 0.67, b34 = 0.67)){      # n: total number of patients   # fu: follow-up length (days)   # af: assemment frequency (days)   # q12, q23, q34: transition probabilities   # b12, b23, b34: treatment effects      n <- design[[1]]; fu <- design[[2]]; af <- design[[3]]   q12 <- hypothesis[[1]]; q23 <- hypothesis[[2]]; q34 <- hypothesis[[3]]    b12 <- hypothesis[[4]]; b23 <- hypothesis[[5]]; b34 <- hypothesis[[6]]      # Calculate length of follow up   na <- n*floor(fu/af)      # Assessment times   as_times <- floor(seq(af, fu, af))      # Simulate numbers starting in each state   starts <- rep(1:3, times = rmultinom(1, n, c(0.15, 0.7, 0.15)))   # Randomly allocate treatment   trt <- rbinom(n, 1, 0.5)      # Simulate transitions into each remaining state   enter2 <- (starts == 1)*rexp(n, q12*exp(log(b12)*trt))   enter3 <- (starts != 3)*(enter2 + rexp(n, q23*exp(log(b23)*trt)))   enter4 <- (starts != 3)*enter3 + rexp(n, q34*exp(log(b34)*trt))      # Matrix of transition times into each state for each patient   enter_m <- matrix(c(enter2, enter3, enter4), ncol = 3)      # Add time of \"transitioning\" to the end of the follow-up period   enter_m <- cbind(enter_m, pmax(enter_m[,3], fu))   # Cap all times at length of follow-up   enter_m <- pmin(enter_m, fu)      # Ceiling all times, assuming assessment is at the start of the day    # and so any transitions after x.0 will be seen at (x+1).0   enter_m <- ceiling(enter_m)      # Translate into number of days spent in each state   times_m <- cbind(enter_m[,1],                     enter_m[,2] - enter_m[,1],                     enter_m[,3] - enter_m[,2],                    enter_m[,4] - enter_m[,3])    y <- t(apply(times_m, 1, function(x) rep(1:4, times = x)))      # Reshape to long   y <- melt(y)   colnames(y) <- c(\"id\", \"time\", \"state\")   y$trt <- trt[y$id]      # Keep observations on assessment times and order by patient   y <- y[y$time %in% as_times,]   y <- y[order(y$id),]      Q <- rbind ( c(0, 0.1, 0, 0),                 c(0, 0, 0.1, 0),                 c(0, 0, 0, 0.1),                 c(0, 0, 0, 0) )    # If msm returns an error we take this as a non-significant result   suppressWarnings(fit <- try({     msm(state ~ time, subject=id, data = y, qmatrix = Q,              covariates = ~ trt)   }, silent = TRUE))      if (class(fit) == \"try-error\") {     sig <- 0   } else {     # If not converged, will not return CIs     r1.67 <- hazard.msm(fit, cl = 1 - 0.0167)$trt     if(ncol(r1.67) != 3){       sig <- 0     } else {       sig1.67 <- sum(!(r1.67[,2] < 1 & r1.67[,3] > 1)) >= 3              r2.5 <- hazard.msm(fit, cl = 1 - 0.025)$trt       sig2.5 <- sum(!(r2.5[,2] < 1 & r2.5[,3] > 1)) >= 2              r5 <- hazard.msm(fit, cl = 1 - 0.05)$trt       sig5 <- sum(!(r5[,2] < 1 & r5[,3] > 1)) >= 1              sig <- any(c(sig1.67, sig2.5, sig5))     }   }   return(c(s = !sig)) }  det_P2 <- function(design = list(n = 500, fu = 60, af = 1),                     hypothesis = list(q12 = 0.05, q23 = 0.05, q34 = 0.03,                                       b12 = 0.67, b23 = 0.67, b34 = 0.67)){      # n: total number of patients   # fu: follow-up length (days)   # af: assemment frequency (days)   # q12, q23, q34: transition probabilities   # b12, b23, b34: treatment effects      n <- design[[1]]; fu <- design[[2]]; af <- design[[3]]   q12 <- hypothesis[[1]]; q23 <- hypothesis[[2]]; q34 <- hypothesis[[3]]    b12 <- hypothesis[[4]]; b23 <- hypothesis[[5]]; b34 <- hypothesis[[6]]      na <- n*floor(fu/af)      return(c(n = n, a = na, f = fu)) }  sim_P2() design_space <- design_space(lower = c(50, 10, 1),                               upper = c(500, 60, 10),                              sim = sim_P2)  hypotheses <- hypotheses(values = matrix(c(0.05, 0.05, 0.03, 0.67, 0.67, 0.67), ncol = 1),                          hyp_names = c(\"alt\"),                          sim = sim_P2)  constraints <- constraints(name = c(\"a\"),                    out = c(\"s\"),                    hyp = c(\"alt\"),                    nom = c(0.2),                    delta =c(0.95),                    binary = c(TRUE))  objectives <- objectives(name = c(\"n\", \"a\", \"f\"),                  out = c(\"n\", \"a\", \"f\"),                  hyp = c(\"alt\", \"alt\", \"alt\"),                  weight = c(10, 1, 10),                  binary = c(FALSE, FALSE, FALSE))  prob <- BOSSS_problem(sim_P2, design_space, hypotheses, objectives, constraints, det_func = det_P2) set.seed(327324)  size <- 30 N <- 100  ptm <- proc.time() sol <- BOSSS_solution(size, N, prob) proc.time() - ptm print(sol)  #> Design variables for the Pareto set:  #>  #>           n      fu      af #> 9  359.3750 50.6250 8.31250 #> 13 415.6250 44.3750 4.93750 #> 17 317.1875 58.4375 4.09375 #> 21 485.9375 39.6875 9.71875 #> 25 345.3125 42.8125 1.28125 #> 26 457.8125 30.3125 3.53125 #> 29 401.5625 49.0625 6.90625 #>  #> Corresponding objective function values... #>  #>    n, alt (mean) a, alt (mean) f, alt (mean) #> 9       359.3750      2156.250       50.6250 #> 13      415.6250      3325.000       44.3750 #> 17      317.1875      4440.625       58.4375 #> 21      485.9375      1943.750       39.6875 #> 25      345.3125     11395.312       42.8125 #> 26      457.8125      3662.500       30.3125 #> 29      401.5625      2810.938       49.0625 #>  #> ...and constraint function values: #>  #>    s, alt (mean) s, alt (var) #> 9      -2.419826    0.1333284 #> 13     -3.131345    0.2494842 #> 17     -3.131345    0.2494842 #> 21     -2.560667    0.1502170 #> 25     -2.907321    0.2036231 #> 26     -3.798549    0.4665877 #> 29     -3.798549    0.4665877 plot(sol) N <- 100 ptm <- proc.time() for(i in 1:20) {   sol <- iterate(sol, prob, N)  } proc.time() - ptm print(sol) #> Design variables for the Pareto set:  #>  #>           n       fu       af #> 14 303.1250 31.87500 2.687500 #> 31 226.7023 49.48812 3.543657 #> 32 437.1483 24.37747 3.068252 #> 33 371.7745 33.72155 6.758731 #> 36 282.0871 36.80602 3.688027 #> 37 248.6326 50.85734 6.359775 #> 39 208.7821 53.31176 4.102278 #> 40 410.2598 27.16768 4.539190 #> 41 213.8159 54.30283 4.537738 #> 43 482.4240 22.17029 3.195361 #> 44 341.9060 44.84317 8.973592 #> 45 363.7644 30.17949 5.041646 #> 46 252.3668 42.81866 4.340260 #> 47 213.8567 52.59133 4.047495 #> 48 479.9210 25.29238 5.113757 #> 50 207.7006 53.61345 3.412483 #>  #> Corresponding objective function values... #>  #>    n, alt (mean) a, alt (mean) f, alt (mean) #> 14      303.1250      3334.375      31.87500 #> 31      226.7023      2947.129      49.48812 #> 32      437.1483      3060.038      24.37747 #> 33      371.7745      1487.098      33.72155 #> 36      282.0871      2538.783      36.80602 #> 37      248.6326      1740.428      50.85734 #> 39      208.7821      2505.385      53.31176 #> 40      410.2598      2051.299      27.16768 #> 41      213.8159      2351.975      54.30283 #> 43      482.4240      2894.544      22.17029 #> 44      341.9060      1367.624      44.84317 #> 45      363.7644      1818.822      30.17949 #> 46      252.3668      2271.302      42.81866 #> 47      213.8567      2566.281      52.59133 #> 48      479.9210      1919.684      25.29238 #> 50      207.7006      3115.509      53.61345 #>  #> ...and constraint function values: #>  #>    s, alt (mean) s, alt (var) #> 14     -1.648184   0.07389930 #> 31     -1.723706   0.07783667 #> 32     -1.723706   0.07783667 #> 33     -2.074967   0.10089846 #> 36     -1.648184   0.07389930 #> 37     -1.576338   0.07043940 #> 39     -1.442005   0.06465620 #> 40     -1.978171   0.09367830 #> 41     -1.378841   0.06222167 #> 43     -1.442005   0.06465620 #> 44     -1.723706   0.07783667 #> 45     -1.378841   0.06222167 #> 46     -1.507734   0.06737895 #> 47     -1.507734   0.06737895 #> 48     -1.648184   0.07389930 #> 50     -1.648184   0.07389930  p <- PS_empirical_ests(sol, prob)[[2]][, 1] p <- 1 - 1/(1 + exp(-p))  df <- sol$p_set[,1:3] df$a <- (df$fu %/% df$af)*df$n  df <- cbind(df, p)  df <- df[order(df[,1]),]    colnames(df) <- c(\"$n$\", \"$f$\", \"$a_f$\", \"a\",                        \"$E[s ~|~ H_1]$\")  #print(xtable(df, digits = c(0,0,0,0,0,2)), booktabs = T, include.rownames = T, sanitize.text.function = function(x) {x}, floating = F, file = here(\"man\", \"tables\", \"P2.txt\"))  plot(sol) #ggsave(here(\"man\", \"figures\", \"P2.pdf\"), height=9, width=14, units=\"cm\")"},{"path":"https://dtwilson.github.io/BOSSS/articles/Examples.html","id":"recruitment","dir":"Articles","previous_headings":"","what":"Recruitment","title":"Examples","text":"Consider standard two-arm parallel group trial continuous endpoint t-test group means planned analysis. Suppose concerned well trial recruit, like estimate overall probability significant result allow uncertainty attained sample size. can approach using hierarchical Poisson-Gamma model multi-site recruitment, site setup times following Poisson process. account uncertainty around true parameter values recruitment model take Bayesian view give priors parameter. view also extends outcome model, place priors mean difference outcome standard deviation . design problem choose number recruiting sites length recruitment period. model parameters hyperparameters prior distributions. want set constraint unconditional probability type II error hypothesis interest, want minimise number sites recruitment period subject constraint. want simulation function returns conditional power (conditioning attained sample size parameters outcome model) given design hypothesis, deterministic function return two objective functions. Now set problem using BOSSS helper functions. going look designs 3 40 sites, running 6 months 5 years.","code":"library(BOSSS)  sim_rec <- function(design = list(m=20, t=3),                      hypothesis = list(a=7, b=2, c=2, d=0.8,                                        f=10, g=1,                                       j=0.3, k=0.3, x=1, y=0.2)) {   # m - total number of sites to be set up   # t - time (in years) for recruitment   # a, b - hyperparameters for rec mean (gamma)   # c, d - hyperparameters for rec sd (gamma)   # f, g - hyperparameters for eta (gamma)   # j, k - hyperparameters for delta (normal)   # x, y - hyperparameters for sigma (gamma)      m <- design[[1]]; t <- design[[2]]      a <- hypothesis[[1]]; b <- hypothesis[[1]]; c <- hypothesis[[1]]; d <- hypothesis[[1]]   f <- hypothesis[[1]]; g <- hypothesis[[1]]   j <- hypothesis[[1]]; k <- hypothesis[[1]]; x <- hypothesis[[1]]; y <- hypothesis[[1]]    # Sample parameters from their priors   # Recruitment rate   alpha <- rgamma(1, (a/b)^2, scale = b^2/a)   beta <- rgamma(1, (c/d)^2, scale = d^2/c)   # Setup rate   eta <- rgamma(1, (f/g)^2, scale = g^2/f)   # Treatment effect   delta <- rnorm(1, j, k)   # Outcome sd   sigma <- rgamma(1, (x/y)^2, scale = y^2/x)      # True per year recruitment rates for each site   lambdas <- rgamma(m, alpha, scale=beta)      # Setup times   setup_ts <- cumsum(rexp(m, eta))      # For each site, simulate number recruited by end   rec_times <- pmax(t - setup_ts, 0)   ns <- rpois(m, lambdas*rec_times)      # Total recruited at final   end_n <- sum(ns)      # Cap at target recruitment   end_n <- min(end_n, 352)      # Power at analysis   pow <- power.t.test(n = end_n/2, delta = delta, sd = sigma)$power   pow      return(c(pr_tII = 1 - pow)) }  det_rec <- function(design = list(m=20, t=3),                      hypothesis = list(a=7, b=2, c=2, d=0.8,                                        f=10, g=1,                                       j=0.3, k=0.3, x=1, y=0.2)) {   m <- design[[1]]; t <- design[[2]]      a <- hypothesis[[1]]; b <- hypothesis[[1]]; c <- hypothesis[[1]]; d <- hypothesis[[1]]   f <- hypothesis[[1]]; g <- hypothesis[[1]]   j <- hypothesis[[1]]; k <- hypothesis[[1]]; x <- hypothesis[[1]]; y <- hypothesis[[1]]   return(c(m = floor(m), t = t)) }   # For example, sim_rec() # Problem specification design_space <- design_space(lower = c(3,0.5),                               upper = c(40,5),                              sim = sim_rec)  hypotheses <- hypotheses(values = matrix(c(7, 2, 2, 0.8,                                             10, 1, 0.3, 0.3, 1, 0.2), ncol = 1),                          hyp_names = c(\"alt\"),                          sim = sim_rec)  constraints <- constraints(name = c(\"TII_ass\"),                    out = c(\"pr_tII\"),                    hyp = c(\"alt\"),                    nom = c(0.4),                    delta =c(0.95),                    binary = c(FALSE))  objectives <- objectives(name = c(\"Sites\", \"Time\"),                  out = c(\"m\", \"t\"),                  hyp = c( \"alt\", \"alt\"),                  weight = c(1, 10),                  binary = c(FALSE, FALSE))  prob <- BOSSS_problem(sim_rec, design_space, hypotheses, objectives, constraints, det_func = det_rec) size <- 20 N <- 100  sol <- BOSSS_solution(size, N, prob)  print(sol) plot(sol) for(i in 1:30) {   sol <- iterate(sol, prob, N)  }  print(sol) plot(sol)"},{"path":"https://dtwilson.github.io/BOSSS/articles/Examples.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Examples","text":"Croft J, Ainsworth G, Corrigan N, et al. NIFTy: near-infrared fluorescence (NIRF) imaging prevent postsurgical hypoparathyroidism (PoSH) thyroid surgery—phase II/III pragmatic, multicentre randomised controlled trial protocol patients undergoing total completion thyroidectomy. BMJ Open, 15:e092422 (2025). https://doi.org/10.1136/bmjopen-2024-092422 Nixon, Jane et al. Pressure Relieving Support Surfaces Pressure Ulcer Prevention (PRESSURE 2): Clinical Health Economic Results Randomised Controlled Trial. eClinicalMedicine, Volume 14, 42 - 52 (2019) Smith IL, Nixon JE, Sharples L. Power sample size multistate model analysis longitudinal discrete outcomes disease prevention trials. Statistics Medicine, 40: 1960–1971 (2021). https://doi.org/10.1002/sim.8882","code":""},{"path":"https://dtwilson.github.io/BOSSS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Duncan Wilson. Author, maintainer.","code":""},{"path":"https://dtwilson.github.io/BOSSS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilson D (2025). BOSSS: Bayesian Optimisation Simulation-based Sample Size. R package version 0.0.0.9000, https://dtwilson.github.io/BOSSS/.","code":"@Manual{,   title = {BOSSS: Bayesian Optimisation for Simulation-based Sample Size},   author = {Duncan Wilson},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://dtwilson.github.io/BOSSS/}, }"},{"path":"https://dtwilson.github.io/BOSSS/index.html","id":"bosss-","dir":"","previous_headings":"","what":"Bayesian Optimisation for Simulation-based Sample Size","title":"Bayesian Optimisation for Simulation-based Sample Size","text":"goal BOSSS help people use Bayesian optimisation solve sample size determination problems simulation required calculate operating characteristics.","code":""},{"path":"https://dtwilson.github.io/BOSSS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Optimisation for Simulation-based Sample Size","text":"Install released version tout CRAN: can install development version BOSSS GitHub :","code":"install.packages(\"BOSSS\") # install.packages(\"devtools\") devtools::install_github(\"DTWilson/BOSSS\")"},{"path":"https://dtwilson.github.io/BOSSS/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bayesian Optimisation for Simulation-based Sample Size","text":"Suppose want design cluster-randomised controlled trial (cRCT) compare mean outcomes two groups. need choose per-arm number clusters, mm, number participants cluster, nn. like choose design jointly minimises total numbers clusters participants whilst ensuring trial 80% power detect target difference. Suppose analytic power function problem, need use simulation estimate power instead. can make search process slow unwieldy. BOSSS helps using Bayesian optimisation carefully choose design evaluate iteration, aiming give improvement best designs found far. Key features: Trial design spaces can several dimensions. Multiple objectives handled non-scalarising way. Design optimisation problems can constrained deterministic stochastic funstion. output applying BOSSS problem set solutions satisfy power constraint offer range trade-offs different objectives minimising (, nn kk). example, consider following BOSSS_solution object resulted applying BOSSS algorithm: sixteen designs choose . example, final design set involves 288 patients 28 clusters arm. estimated power design 1−1/(1+exp(1.535920))=0.821 - 1/(1 + \\exp(1.535920)) = 0.82. can visualise trade-offs two objectives plotting solution:  detailed walkthrough specify solve problems BOSSS, see “Getting started” tab. applications collected “Examples” article.","code":"print(solution) #> Design variables for the Pareto set:  #>  #>           m         n #> 3  16.25000 31.250000 #> 22 40.48122  6.069682 #> 23 26.78465 11.300130 #> 25 31.99851  8.458535 #> 26 23.15534 14.411708 #> 29 15.86167 33.573895 #> 30 20.48457 18.825180 #> 31 17.78064 24.595059 #> 32 17.20562 27.002041 #> 33 21.47477 16.377383 #> 34 19.07500 21.685123 #> 35 36.42695  7.000018 #> 36 43.64308  5.105722 #> 37 15.65390 34.201300 #> 38 43.37548  5.165664 #> 40 28.34157 10.180265 #>  #> Corresponding objective function values...  #>  #>    N, alt (mean) m, alt (mean) #> 3       507.8125      16.25000 #> 22      245.7081      40.48122 #> 23      302.6700      26.78465 #> 25      270.6605      31.99851 #> 26      333.7080      23.15534 #> 29      532.5381      15.86167 #> 30      385.6257      20.48457 #> 31      437.3160      17.78064 #> 32      464.5869      17.20562 #> 33      351.7005      21.47477 #> 34      413.6437      19.07500 #> 35      254.9893      36.42695 #> 36      222.8294      43.64308 #> 37      535.3836      15.65390 #> 38      224.0632      43.37548 #> 40      288.5247      28.34157 #>  #> ...and constraint function values: #>  #>    s, alt (mean) s, alt (var) #> 3      -1.635087  0.007321908 #> 22     -1.577629  0.007047103 #> 23     -1.591789  0.007113245 #> 25     -1.318214  0.006001954 #> 26     -1.442726  0.006465914 #> 29     -1.502002  0.006710669 #> 30     -1.613281  0.007215600 #> 31     -1.330260  0.006044017 #> 32     -1.515481  0.006768604 #> 33     -1.455710  0.006518154 #> 34     -1.570598  0.007014638 #> 35     -1.765190  0.008010631 #> 36     -1.410713  0.006340311 #> 37     -1.529077  0.006827921 #> 38     -1.481997  0.006626261 #> 40     -1.535920  0.006858112 plot(solution)"},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_problem.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a BOSSS problem — BOSSS_problem","title":"Create a BOSSS problem — BOSSS_problem","text":"Create BOSSS problem","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_problem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a BOSSS problem — BOSSS_problem","text":"","code":"BOSSS_problem(   sim_trial,   design_space,   hypotheses,   objectives,   constraints = NULL,   det_func = NULL )"},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_problem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a BOSSS problem — BOSSS_problem","text":"sim_trial function generates single (possibly multivariate) Monte Carlo outcome design hypothesis. design_space data frame constructed via design_space(). hypotheses data frame constructed via hypotheses(). objectives data frame constructed via objectives(). constraints optional ata frame constructed via constraints(). det_func optional function generates deterministic outcomes design hypothesis.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_problem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a BOSSS problem — BOSSS_problem","text":"object class BOSSS_problem.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_solution.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an initial solution to a BOSSS problem — BOSSS_solution","title":"Create an initial solution to a BOSSS problem — BOSSS_solution","text":"Create initial solution BOSSS problem","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_solution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an initial solution to a BOSSS problem — BOSSS_solution","text":"","code":"BOSSS_solution(size, N, problem)"},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_solution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an initial solution to a BOSSS problem — BOSSS_solution","text":"size Number points used initialisation. N Number simulations used MC estimation. problem BOSSS problem solved.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_solution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an initial solution to a BOSSS problem — BOSSS_solution","text":"object class BOSSS_solution.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/PS_empirical_ests.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — PS_empirical_ests","title":"Title — PS_empirical_ests","text":"Title","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/PS_empirical_ests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — PS_empirical_ests","text":"","code":"PS_empirical_ests(solution, problem)"},{"path":"https://dtwilson.github.io/BOSSS/reference/PS_empirical_ests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — PS_empirical_ests","text":"solution BOSSS solution. problem BOSSS problem.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/PS_empirical_ests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — PS_empirical_ests","text":"list two dataframes objective constraint estimates (empirical, model based) designs Pareto set","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of constraints — constraints","title":"Create a set of constraints — constraints","text":"Create set constraints","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of constraints — constraints","text":"","code":"constraints(name, out, hyp, nom, delta, binary)"},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of constraints — constraints","text":"name character vector constraint names. character vector denoting simulation output constraint pertains . hyp character vector denoting hypothesis constraint pertains . nom numeric vector nominal upper limits. delta numeric vector probabilities. binary boolean vector denoting constraint output binary otherwise.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of constraints — constraints","text":"data.frame defining constraints.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a set of constraints — constraints","text":"","code":"constraints(name = c(\"tII\"),             out = c(\"s\"),             hyp = c(\"alt\"),             nom = c(0.1),             delta = c(0.95),             binary = c(TRUE)) #>   name out hyp nom delta binary #> 1  tII   s alt 0.1  0.95   TRUE"},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a design space — design_space","title":"Create a design space — design_space","text":"Create design space","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a design space — design_space","text":"","code":"design_space(name = NULL, sim = NULL, lower, upper)"},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a design space — design_space","text":"name optional character vector design variable names. sim optional simulation function. lower numeric vector lower limits. upper numeric vector upper limits.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a design space — design_space","text":"data.frame defining design space.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a design space — design_space","text":"","code":"design_space(lower = c(10, 3),              upper = c(500, 50),              name = c(\"n\", \"k\")) #>   name lower upper #> 1    n    10   500 #> 2    k     3    50"},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_check_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical check — diag_check_point","title":"Empirical check — diag_check_point","text":"Empirical check","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_check_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical check — diag_check_point","text":"","code":"diag_check_point(design, problem, solution, N, current = NULL)"},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_check_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical check — diag_check_point","text":"design Design evaluate. problem BOSSS problem. solution BOSSS solution. N Number simulations use computing Monte Carlo estimates. current optional matrix containing results previous check_point calls, built upon.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_check_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical check — diag_check_point","text":"matrix row corresponds model BOSSS solution object, giving Monte Carlo estimates mean variance along side number simulations used compute .","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot one-dimensional model fits — diag_plots","title":"Plot one-dimensional model fits — diag_plots","text":"Plot one-dimensional model fits","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot one-dimensional model fits — diag_plots","text":"","code":"diag_plots(design, problem, solution, type = \"response\")"},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot one-dimensional model fits — diag_plots","text":"design Design centre plots . problem BOSSS problem. solution BOSSS solution. type type prediction required binary outcomes. default scale response variable (\"response\"); scale linear predictor (\"link\") can used instead.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot one-dimensional model fits — diag_plots","text":"list plots size (# models) x (# design variables).","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Examine model predictions — diag_predictions","title":"Examine model predictions — diag_predictions","text":"Examine model predictions","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examine model predictions — diag_predictions","text":"","code":"diag_predictions(problem, solution, type = \"response\")"},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Examine model predictions — diag_predictions","text":"problem BOSSS problem. solution BOSSS solution. type type prediction required binary outcomes. default scale response variable (\"response\"); scale linear predictor (\"link\") can used instead.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Examine model predictions — diag_predictions","text":"list dataframes, one model, giving empirical (Monte Carlo) point interval estimates alongside predicted point interval estimates, flagging agree.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/extend_initial.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend the initial set of design evaluations — extend_initial","title":"Extend the initial set of design evaluations — extend_initial","text":"Extend initial set design evaluations","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/extend_initial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend the initial set of design evaluations — extend_initial","text":"","code":"extend_initial(problem, solution, extra_N = 0, extra_points = 0)"},{"path":"https://dtwilson.github.io/BOSSS/reference/extend_initial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend the initial set of design evaluations — extend_initial","text":"problem BOSSS problem. solution current BOSSS solution. extra_N number extra simulations run exisiting designs. extra_points number new design points add.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/extend_initial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend the initial set of design evaluations — extend_initial","text":"updated BOSSS solution object","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of hypotheses — hypotheses","title":"Create a set of hypotheses — hypotheses","text":"Create set hypotheses","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of hypotheses — hypotheses","text":"","code":"hypotheses(par_name = NULL, sim = NULL, values, hyp_names)"},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of hypotheses — hypotheses","text":"par_name optional character vector model parameter names. sim optional simulation function. values numeric matrix, column giving model parameter values specific hypothesis. hyp_names character vector hypothesis names.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of hypotheses — hypotheses","text":"data.frame defining hypotheses.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a set of hypotheses — hypotheses","text":"","code":"hypotheses(values = matrix(c(0.3, 0.05, 0.95), ncol = 1),            hyp_names = c(\"alt\"),            par_name = c(\"mu\", \"var_u\", \"var_e\")) #>        alt #> mu    0.30 #> var_u 0.05 #> var_e 0.95"},{"path":"https://dtwilson.github.io/BOSSS/reference/iterate.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform one iteration of Bayesian optimisation — iterate","title":"Perform one iteration of Bayesian optimisation — iterate","text":"Perform one iteration Bayesian optimisation","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/iterate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform one iteration of Bayesian optimisation — iterate","text":"","code":"iterate(solution, problem, N, design = NULL)"},{"path":"https://dtwilson.github.io/BOSSS/reference/iterate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform one iteration of Bayesian optimisation — iterate","text":"solution current BOSSS solution. problem BOSSS problem. N number simulations use computing Monte Carlo estimates. design optional vector design space evaluated. left NULL, optimal design sought.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/iterate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform one iteration of Bayesian optimisation — iterate","text":"updated BOSSS solution object.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of objectives — objectives","title":"Create a set of objectives — objectives","text":"Create set objectives","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of objectives — objectives","text":"","code":"objectives(name, out, hyp, weight, binary = NULL)"},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of objectives — objectives","text":"name character vector objective names. character vector denoting simulation output objective pertains . hyp character vector denoting hypothesis objective pertains . weight numeric vector weights assigned objective. binary optional boolean vector denoting output objective function binary (TRUE) continuous (FALSE).","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of objectives — objectives","text":"data.frame defining objectives.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a set of objectives — objectives","text":"","code":"objectives(name = c(\"min_n\", \"min_k\"),                      out = c(\"n\", \"k\"),                      hyp = c(\"alt\", \"alt\"),                      weight = c(10, 1)) #>    name out hyp weight #> 1 min_n   n alt     10 #> 2 min_k   k alt      1"},{"path":"https://dtwilson.github.io/BOSSS/reference/plot.BOSSS_solution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","title":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","text":"Plot Pareto front BOSSS solution","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/plot.BOSSS_solution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","text":"","code":"# S3 method for class 'BOSSS_solution' plot(x, y, ...)"},{"path":"https://dtwilson.github.io/BOSSS/reference/plot.BOSSS_solution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","text":"x BOSSS solution. y used. ... arguments method.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/plot.BOSSS_solution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","text":"ggplot object two- three-dimension Pareto fronts.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/print.BOSSS_solution.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","title":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","text":"Print Pareto set BOSSS solution","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/print.BOSSS_solution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","text":"","code":"# S3 method for class 'BOSSS_solution' print(x, ...)"},{"path":"https://dtwilson.github.io/BOSSS/reference/print.BOSSS_solution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","text":"x BOSSS solution. ... arguments method.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/print.BOSSS_solution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","text":"data.frame containing Pareto set corresponding (unweighted) objective values.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a one-dimensional sensitivity analysis — sensitivity","title":"Run a one-dimensional sensitivity analysis — sensitivity","text":"Run one-dimensional sensitivity analysis","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a one-dimensional sensitivity analysis — sensitivity","text":"","code":"sensitivity(sa_hypothesis, design, problem, solution, num_eval = 20, N = 100)"},{"path":"https://dtwilson.github.io/BOSSS/reference/sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a one-dimensional sensitivity analysis — sensitivity","text":"sa_hypothesis Data frame defining SA variable bounds design Design tested problem BOSSS problem solution BOSSS solution num_eval Number points evaluate N Number MC samples use evaluation","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a one-dimensional sensitivity analysis — sensitivity","text":"matrix estimated means variances simulation output SA variable range.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/update_constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Update problem constraints — update_constraint","title":"Update problem constraints — update_constraint","text":"Update problem constraints","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/update_constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update problem constraints — update_constraint","text":"","code":"update_constraint(   problem,   number = NULL,   name = NULL,   nom = NULL,   delta = NULL )"},{"path":"https://dtwilson.github.io/BOSSS/reference/update_constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update problem constraints — update_constraint","text":"problem BOSSS problem number index constraint(s) updated name name constraint(s) updated nom new nominal value(s) delta new acceptance threshold(s)","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/update_constraint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update problem constraints — update_constraint","text":"updated BOSSS problem object.","code":""},{"path":"https://dtwilson.github.io/BOSSS/news/index.html","id":"bosss-development-version","dir":"Changelog","previous_headings":"","what":"BOSSS (development version)","title":"BOSSS (development version)","text":"Initial CRAN submission.","code":""}]
