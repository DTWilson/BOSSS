[{"path":"https://dtwilson.github.io/BOSSS/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 Duncan Wilson Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dtwilson.github.io/BOSSS/articles/BOSSS.html","id":"problem","dir":"Articles","previous_headings":"","what":"Problem","title":"BOSSS","text":"first ingredient BOSSS problem simulation function. arguments function must first specify design variables want vary problem, followed model parameters. example two design variables representing number clusters arm, number participants arm. model parameters mean difference outcome control experimental arms (beta_1), within-cluster variance (var_e), -cluster variance (var_u). Note inputs require defaults provided. element interface simulation function must conform return value, named vector quantities ’s mean values want estimate using Monte Carlo method. , one quantity: boolean indicator negative decision, s. problem just interested expected value s; also want minimise number clusters number participants, put upper limit number participants per cluster. Since fixed quantities given design, evaluate separate deterministic function. conform principles simulation function, inputs, allowing different named outputs. , outputs just m, N = n*m: Next, need note ranges design variables plan search . use design_space() function , specifying lower upper limits design variables order appear simulation function arguments: Note function automatically retrieves names design variables based order take simulation function. also need specify hypotheses ’re planning simulate , using hypotheses() function, specifying order parameters appear simulation function argument. need one hypothesis , alternative, since estimating type II error rate. Constraints specified using constraints function. constraint named, defined respect specific output specific hypothesis. nominal maximum value, probability delta used judge satisfied. , constraint mean simulation output (.e. probability negative result) alt hypothesis less equal 0.2 probability least 0.95. Finally, note whether constraint output binary otherwise. final ingredient problem set objectives want minimise. Similar constraints, objectives tied specific output hypothesis. also specify weights objective help guide internal optimisation process, note whether output objective binary continuous. example, want minimise number patients N number clusters m, latter carrying weight 100 times former. now put simulation function set data frames together create object class BOSSS_problem.","code":"sim_cRCT <- function(m = 10, n = 20,                       beta_1 = 0.3, var_e = 0.95, var_u = 0.05){      m <- floor(m); n <- floor(n)      x <- rep(c(0,1), each = m)    y <- rnorm(2*m, 0, sqrt(var_u + var_e/n))   y <- y + x*beta_1    s <- t.test(y[x==1], y[x==0], alternative = \"greater\")$p.value > 0.025    return(c(s = s)) }  # For example, sim_cRCT() #>     s  #> FALSE det_cRCT <- function(m = 10, n = 5,                       beta_1 = 0.3, var_e = 0.95, var_u = 0.05) {   return(c(m = m, N = n*m)) } design_space <- design_space(lower = c(5, 5),                               upper = c(50, 40),                              sim = sim_cRCT)  design_space #>   name lower upper #> 1    m     5    50 #> 2    n     5    40 hypotheses <- hypotheses(values = matrix(c(0.3, 0.95, 0.05), ncol = 1),                          hyp_names = c(\"alt\"),                          sim = sim_cRCT)  hypotheses #>         alt #> beta_1 0.30 #> var_e  0.95 #> var_u  0.05 constraints <- constraints(name = c(\"con_tII\"),                    out = c(\"s\"),                    hyp = c(\"alt\"),                    nom = c(0.2),                    delta = c(0.95),                    binary = c(TRUE))  constraints #>      name out hyp nom delta binary #> 1 con_tII   s alt 0.2  0.95   TRUE objectives <- objectives(name = c(\"N\", \"m\"),                  out = c(\"N\", \"m\"),                  hyp = c(\"alt\", \"alt\"),                  weight = c(1, 10),                  binary = c(FALSE, FALSE))  objectives #>   name out hyp weight binary #> 1    N   N alt      1  FALSE #> 2    m   m alt     10  FALSE prob <- BOSSS_problem(sim_cRCT, design_space, hypotheses, objectives, constraints, det_func = det_cRCT)"},{"path":"https://dtwilson.github.io/BOSSS/articles/BOSSS.html","id":"initialisation","dir":"Articles","previous_headings":"","what":"Initialisation","title":"BOSSS","text":"set problem, now need create initial solution . involves setting space-filling set designs spanning design space (size number designs), computing Monte Carlo estimates expectations interested designs (using N samples evaluation), fitting Gaussian Process models estimates, using models estimate Pareto set front:  print() function give table Pareto set associated objective function values. plot() function plot Pareto front.","code":"set.seed(9823579)  size <- 20 N <- 10^3  sol <- BOSSS_solution(size, N, prob) #> Checking simulation speed... #> Initialisation will take approximately 5.176617 secs  #> Solution found  print(sol)  #> Design variables for the Pareto set:  #>  #>        m      n #> 3 16.250 31.250 #> 4 21.875 18.125 #> 6 33.125  9.375 #>  #> Corresponding objective function values...  #>  #>   N, alt (mean) m, alt (mean) #> 3      507.8125        16.250 #> 4      396.4844        21.875 #> 6      310.5469        33.125 #>  #> ...and constraint function values: #>  #>   s, alt (mean) s, alt (var) #> 3     -1.635087  0.007321908 #> 4     -1.570598  0.007014638 #> 6     -1.757202  0.007965536 plot(sol)"},{"path":"https://dtwilson.github.io/BOSSS/articles/BOSSS.html","id":"iteration","dir":"Articles","previous_headings":"","what":"Iteration","title":"BOSSS","text":"can now start improving solution calling iterate() function. call uses fitted Gaussian Process models decide next design evaluated, computes Monte Carlo estimates point, updates estimated Pareto set front.  can compare initial final approximations Pareto front actual front since, simple example, can calculate power analytically:","code":"N <- 10^3 for(i in 1:20) {   sol <- iterate(sol, prob, N)  } print(sol) #> Design variables for the Pareto set:  #>  #>           m         n #> 3  16.25000 31.250000 #> 22 40.48122  6.069682 #> 23 26.78465 11.300130 #> 25 31.99851  8.458535 #> 26 23.15534 14.411708 #> 29 15.86167 33.573895 #> 30 20.48457 18.825180 #> 31 17.78064 24.595059 #> 32 17.20562 27.002041 #> 33 21.47477 16.377383 #> 34 19.07500 21.685123 #> 35 36.42695  7.000018 #> 36 43.64308  5.105722 #> 37 15.65390 34.201300 #> 38 43.37548  5.165664 #> 40 28.34157 10.180265 #>  #> Corresponding objective function values...  #>  #>    N, alt (mean) m, alt (mean) #> 3       507.8125      16.25000 #> 22      245.7081      40.48122 #> 23      302.6700      26.78465 #> 25      270.6605      31.99851 #> 26      333.7080      23.15534 #> 29      532.5381      15.86167 #> 30      385.6257      20.48457 #> 31      437.3160      17.78064 #> 32      464.5869      17.20562 #> 33      351.7005      21.47477 #> 34      413.6437      19.07500 #> 35      254.9893      36.42695 #> 36      222.8294      43.64308 #> 37      535.3836      15.65390 #> 38      224.0632      43.37548 #> 40      288.5247      28.34157 #>  #> ...and constraint function values: #>  #>    s, alt (mean) s, alt (var) #> 3      -1.635087  0.007321908 #> 22     -1.577629  0.007047103 #> 23     -1.591789  0.007113245 #> 25     -1.318214  0.006001954 #> 26     -1.442726  0.006465914 #> 29     -1.502002  0.006710669 #> 30     -1.613281  0.007215600 #> 31     -1.330260  0.006044017 #> 32     -1.515481  0.006768604 #> 33     -1.455710  0.006518154 #> 34     -1.570598  0.007014638 #> 35     -1.765190  0.008010631 #> 36     -1.410713  0.006340311 #> 37     -1.529077  0.006827921 #> 38     -1.481997  0.006626261 #> 40     -1.535920  0.006858112 plot(sol) df <- expand.grid(m = 5:50,                   n = 5:40) df$N <- df$m*df$n  df$clust_var <- 0.05 + 0.95/df$n  df$pow <- power.t.test(df$m, delta = 0.3, sd = sqrt(df$clust_var),                        alternative = \"one.sided\", sig.level = 0.025)$power  df <- df[df$pow >= 0.8, c(\"m\", \"N\")] df <-  data.frame(paretoFilter(as.matrix(df))) df$t <- \"True\"  df <- rbind(df, data.frame(m = c(16, 21, 33,                                  25, 32, 18, 22, 19, 28, 17, 36, 15, 20, 39),                            N = c(16*31, 21*18, 33*9,                                  25*12, 32*8, 18*24, 22*15, 19*20, 28*10, 17*26, 36*7, 15*31, 20*18, 39*6),                            t = c(rep(\"Initial\", 3), rep(\"Final\", 11))))  # Add ends of steps df2  <- rbind(data.frame(m=c(43, 43),                           N=c(297, 234),                           t=c(\"Initial\", \"Final\")),               df,               data.frame(m=c(16, 15),                          N=c(546, 546),                          t=c(\"Initial\", \"Final\")))  ggplot(df, aes(N, m, colour = t)) + geom_point() +   xlab(\"Total sample size per arm, N\") +   ylab(\"Number of clusters per arm, m\") +   scale_colour_manual(name = \"\", values = c(\"#EF476F\", \"#FFD166\", \"#06D6A0\")) +   geom_step(data=df2) +   theme_minimal() #ggsave(here(\"man\", \"figures\", \"cRCT_fronts.pdf\"), height=9, width=14, units=\"cm\")"},{"path":"https://dtwilson.github.io/BOSSS/articles/BOSSS.html","id":"diagnostics","dir":"Articles","previous_headings":"","what":"Diagnostics","title":"BOSSS","text":"check GP models giving sensible predictions, can choose specific design plot predictions model along range design variable.   can also get predicted values 95% credible intervals point evaluated, contrasting empirical MC estimate interval. return data frame models, named according output-hypothesis combination defines . highlight * points two intervals overlap. things aren’t looking good, may indicate need points initial evaluations, simulations points. can via extend_initial(). example, suppose want add extra 500 simulations initial points: , add another 10 points: happy solution chosen specific design Pareto set, might want double check point running large number simulations . decide want run simulations point, can pass previous results built upon.","code":"# Pick a specific design from the Pareto set design <- sol$p_set[1,]  diag_plots(design, prob, sol) #> [[1]] #>  #> [[2]] diag_predictions(prob, sol) #> $`Output: s, hypothesis: alt` #>           m         n     MC_mean       MC_l95      MC_u95      p_mean #> 1  27.50000 22.500000 0.060175930 0.0582463424 0.062165221 0.056957904 #> 2  38.75000 13.750000 0.024190324 0.0223066149 0.026228837 0.036380055 #> 3  16.25000 31.250000 0.163134746 0.1611850248 0.165103410 0.179776337 #> 4  21.87500 18.125000 0.172131148 0.1701807896 0.174099168 0.159851517 #> 5  44.37500 35.625000 0.002199120 0.0009016767 0.005353483 0.001586608 #> 6  33.12500  9.375000 0.147141144 0.1451927364 0.149111136 0.142194634 #> 7  10.62500 26.875000 0.429028389 0.4270703303 0.430988671 0.426962209 #> 8  13.43750 15.937500 0.411035586 0.4090778258 0.412996167 0.404775655 #> 9  35.93750 33.437500 0.005197921 0.0035644644 0.007574237 0.005973989 #> 10 47.18750  7.187500 0.094162335 0.0922213338 0.096139862 0.095093667 #> 11 24.68750 24.687500 0.068172731 0.0662394513 0.070158196 0.072137616 #> 12 19.06250 11.562500 0.310075970 0.3081202048 0.312038550 0.318630782 #> 13 41.56250 29.062500 0.002199120 0.0009016767 0.005353483 0.003487009 #> 14 30.31250 20.312500 0.052179128 0.0502543456 0.054173427 0.046383132 #> 15  7.81250 37.812500 0.556977209 0.5550171525 0.558935493 0.552228502 #> 16  9.21875 21.406250 0.526989204 0.5250296185 0.528947959 0.529431473 #> 17 31.71875 38.906250 0.011195522 0.0093966506 0.013334129 0.011786138 #> 18 42.96875 12.656250 0.031187525 0.0292867903 0.033207399 0.030595545 #> 19 20.46875 30.156250 0.110155938 0.1082119693 0.112130437 0.097222981 #> 20 26.09375  8.281250 0.287085166 0.2851299855 0.289048332 0.288050484 #> 21 38.46983  5.000000 0.254098361 0.2521441651 0.256062516 0.245954606 #> 22 40.48122  6.069682 0.171131547 0.1691812571 0.173099636 0.171932284 #> 23 26.78465 11.300130 0.169132347 0.1671821942 0.171100575 0.181053083 #> 24 45.10551  5.045737 0.188124750 0.1861734031 0.190091773 0.183550940 #> 25 31.99851  8.458535 0.211115554 0.2091630314 0.213081392 0.185448055 #> 26 23.15534 14.411708 0.191123551 0.1891720354 0.193090403 0.181217014 #> 27 32.94188  8.272720 0.182127149 0.1801761539 0.184094526 0.178292303 #> 28 18.79809 24.038611 0.159136345 0.1571869290 0.161105317 0.169276494 #> 29 15.86167 33.573895 0.182127149 0.1801761539 0.184094526 0.182665565 #> 30 20.48457 18.825180 0.166133547 0.1641836058 0.168101988 0.179288540 #> 31 17.78064 24.595059 0.209116353 0.2071639238 0.211082285 0.188682935 #> 32 17.20562 27.002041 0.180127949 0.1781770757 0.182095449 0.183209577 #> 33 21.47477 16.377383 0.189124350 0.1871729467 0.191091316 0.185805282 #> 34 19.07500 21.685123 0.172131148 0.1701807896 0.174099168 0.183041389 #> 35 36.42695  7.000018 0.146141543 0.1441932276 0.148111628 0.178237873 #> 36 43.64308  5.105722 0.196121551 0.1941697667 0.198088133 0.190057094 #> 37 15.65390 34.201300 0.178128749 0.1761780001 0.180096375 0.187843532 #> 38 43.37548  5.165664 0.185125950 0.1831747758 0.187093147 0.189051999 #> 39 15.49021 34.178806 0.199120352 0.1971684114 0.201086776 0.192789817 #> 40 28.34157 10.180265 0.177129148 0.1751784633 0.179096839 0.186108926 #>           p_l95       p_u95 no_overlap #> 1  0.0504899820 0.064198366            #> 2  0.0303723465 0.043522761          * #> 3  0.1685700668 0.191555946          * #> 4  0.1498382099 0.170399867            #> 5  0.0007426893 0.003386224            #> 6  0.1326243685 0.152334210            #> 7  0.4034164409 0.450843698            #> 8  0.3814426065 0.428547144            #> 9  0.0040846020 0.008729677            #> 10 0.0822898201 0.109651686            #> 11 0.0649001650 0.080113016            #> 12 0.2973662995 0.340678592            #> 13 0.0020974537 0.005791796            #> 14 0.0403302792 0.053293962            #> 15 0.5212681015 0.582789205            #> 16 0.5032728008 0.555429464            #> 17 0.0074397908 0.018623992            #> 18 0.0248144243 0.037671489            #> 19 0.0884632136 0.106748573          * #> 20 0.2676806489 0.309315688            #> 21 0.2286040497 0.264171060            #> 22 0.1616848682 0.182687635            #> 23 0.1703657257 0.192255514            #> 24 0.1699502877 0.197980407            #> 25 0.1752688085 0.196077936          * #> 26 0.1700459614 0.192951327            #> 27 0.1682486228 0.188799450            #> 28 0.1591501230 0.179909324            #> 29 0.1711977832 0.194721045            #> 30 0.1684772717 0.190634520          * #> 31 0.1776039931 0.200284672          * #> 32 0.1723795169 0.194560100            #> 33 0.1747817318 0.197357815            #> 34 0.1718886037 0.194747631            #> 35 0.1675825084 0.189416571          * #> 36 0.1784924349 0.202186625            #> 37 0.1754993903 0.200844424            #> 38 0.1778435573 0.200794320            #> 39 0.1803004918 0.205926932            #> 40 0.1757413199 0.196942018 sol <- extend_initial(prob, sol, extra_N = 500)  # Look at the first threee designs; the empirical and predicted estimates will have changed diag_predictions(prob, sol)[[1]][1:3,] #>       m     n    MC_mean     MC_l95     MC_u95     p_mean      p_l95      p_u95 #> 1 27.50 22.50 0.05811784 0.05682523 0.05943799 0.05602840 0.05050379 0.06211780 #> 2 38.75 13.75 0.02679286 0.02551707 0.02813058 0.03601014 0.03091769 0.04190509 #> 3 16.25 31.25 0.17342042 0.17211801 0.17473061 0.18109913 0.17081373 0.19186055 #>   no_overlap #> 1            #> 2          * #> 3 sol <- extend_initial(prob, sol, extra_points = 10)  # Look at the added designs, which go to the top of the table diag_predictions(prob, sol)[[1]][1:10,] #>           m        n     MC_mean      MC_l95      MC_u95      p_mean #> 21 48.59375 25.78125 0.002132765 0.001155577 0.003933034 0.001881998 #> 22 37.34375 17.03125 0.030125300 0.028846092 0.031459398 0.027013738 #> 23 14.84375 34.53125 0.212076780 0.210773425 0.213386014 0.212351339 #> 24 12.03125 10.46875 0.537989869 0.536683317 0.539295900 0.533638118 #> 25 34.53125 27.96875 0.010797121 0.009566020 0.012184709 0.011169427 #> 26 45.78125 19.21875 0.006798187 0.005609065 0.008237316 0.007098252 #> 27 23.28125 36.71875 0.046787523 0.045498433 0.048111296 0.048960723 #> 28 17.65625 14.84375 0.296720874 0.295416245 0.298028829 0.291551982 #> 29 40.15625 32.34375 0.002799254 0.001754934 0.004462244 0.002933357 #> 30 28.90625  6.09375 0.318715009 0.317410142 0.320022726 0.326801725 #>          p_l95       p_u95 no_overlap #> 21 0.001169672 0.003026812            #> 22 0.023649467 0.030841479            #> 23 0.201705027 0.223402325            #> 24 0.510478937 0.556653212            #> 25 0.009271143 0.013451112            #> 26 0.005422669 0.009286749            #> 27 0.042203161 0.056736211            #> 28 0.279907439 0.303476795            #> 29 0.002104517 0.004087291            #> 30 0.308788144 0.345341131 design <- sol$p_set[nrow(sol$p_set),]  r <- diag_check_point(design, prob, sol, N=10^6)  #> Model 1 prediction interval: [0.175, 0.193] #> Model 1 empirical interval: [0.175, 0.176] r <- diag_check_point(design, prob, sol, N=10^4, r)  #> Model 1 prediction interval: [0.175, 0.193] #> Model 1 empirical interval: [0.175, 0.176]"},{"path":"https://dtwilson.github.io/BOSSS/articles/Examples.html","id":"nifty","dir":"Articles","previous_headings":"","what":"NIFTy","title":"Examples","text":"NIFTy trial open people total thyroid surgery aimed find whether using near-infrared fluorescence imaging reduce number people whose parathyroid glands become damaged thyroid surgery. adaptive design interim analysis based (binary) short-term outcome, final analysis based (, binary) long-term outcome. design problem choose sample size decision rule inerim final analysis. analyses used χ2\\chi^2 test, decision rule expressed nominal α\\alpha used stage. simulation function, exactly provided trial statistician except small adjustments arguments return values conform BOSSS standards. can construct BOSSS problem object follows: implies going search space sample sizes decision criteria, looking trial designs simultaneously minimise type error rate (\"TI\"), type II error rate (\"TII\") expected sample size (\"EN\"), subject type error rate (probably) less 0.1 (\"TI_con\") type II error rate (probably) less 0.2 (\"TIIcon\"). Now initialise get initial estimate Pareto front:  Finally, iterate times improve initial approximation:","code":"#n is the total sample size #ninterim is the number of patients at the interim analysis (proportion) #ainterim is alpha at interim analysis (threshold p-value at interim analysis) #afinal is alpha at final analaysis (threshold p-value for 2nd and final analysis) #this means overall alpha for the trial is ainterim*afinal # #pcontshort is the probability of 1 day PoSH in the control arm #pexpshort is the probability of 1 day PoSH in the experimental arm #pcontlong is the probability of 6 month PoSH in the control arm #pexplong is the probability of 6 month PoSH in the experimental arm #p01_relative is s.t. p01_relative*pexplong = probability of having  # a long term outcome after no short term outcome  sim_trial <- function(n = 300, ninterim = 0.5, ainterim = 0.4, afinal = 0.1,                       pcontshort = 0.25, pexpshort = 0.125,                       pcontlong = 0.1, pexplong = 0.03, p01_relative = 0) {   ninterim <- floor(ninterim*n)      patients<-c(1:n) #create patients      treat<- rep(c(1,2), ceiling(n/2))[1:n]      n_cont <- sum(treat == 1)      short<-rep(0,n) #short term outcome   long<-rep(0,n) #long term outcome      data<-data.frame(patients,treat,short,long) #combine into dataset      #generate result 1/0 for short term outcome. If short term outcome=0 then long term outcome=0   #If short term outcome=1 then long term outcome has probability pcontlong/pcontshort   #repeat for treatment=2   # for(i in 1:n){   #   if(treat[i]==1){   #     data$short[i]<-rbinom(1,1,pcontshort)   #     if(data$short[i]==0){   #       data$long[i]<-0   #     }   #     if(data$short[i]==1){   #       data$long[i]<-rbinom(1,1,pcontlong/pcontshort)   #     }   #   }   #   else{   #     data$short[i]<-rbinom(1,1,pexpshort)   #     if(data$short[i]==0){   #       data$long[i]<-0   #     }   #     if(data$short[i]==1){   #       data$long[i]<-rbinom(1,1,pexplong/pexpshort)   #     }   #   }   # }      # An alternative and more general parametersation of the above model   # to allow different values of probability of a long outcome after   # no short outcome (previously hard coded as 0)    # probability vector p00, p01, p10, p11 in (short, long) form   # Control arm:   p01 <- p01_relative*pcontlong   p11 <- pcontlong - p01   p10 <- pcontshort - p11   # Simulate outcomes in multinomial format   cont_count <- rmultinom(1, n_cont, c((1 - p01 - p10 - p11), p01, p10, p11))   # Translate these to short and long outcomes   cont_out <- matrix(c(rep(c(0,0), cont_count[1]),                        rep(c(0,1), cont_count[2]),                        rep(c(1,0), cont_count[3]),                        rep(c(1,1), cont_count[4])), ncol = 2, byrow = TRUE)   # shuffle the list randomly   cont_out <- cont_out[sample(1:nrow(cont_out)),]      # Experimental arm:     # Control arm:   p01 <- p01_relative*pexplong   p11 <- pexplong - p01   p10 <- pexpshort - p11   exp_count <- rmultinom(1, n - n_cont, c((1 - p01 - p10 - p11), p01, p10, p11))   exp_out <- matrix(c(rep(c(0,0), exp_count[1]),                        rep(c(0,1), exp_count[2]),                        rep(c(1,0), exp_count[3]),                        rep(c(1,1), exp_count[4])), ncol = 2, byrow = TRUE)   exp_out <- exp_out[sample(1:nrow(exp_out)),]      data[data$treat == 1, c(\"short\", \"long\")] <- cont_out   data[data$treat == 2, c(\"short\", \"long\")] <- exp_out      #perform chi squared test on short term outcome for 1st ninterim patients   data2<-data[1:ninterim,]   tbl<-table(data2$short,data2$treat)   test<- suppressWarnings(chisq.test(tbl)$p.value) #get p-value      #if p<ainterim, perform chi squared test on long term outcome for all patients   if(test<ainterim){     tbl2<-table(data$long,data$treat)     test2<- suppressWarnings(chisq.test(tbl2)$p.value)   }      #if p>ainterim, trial unsuccessful at interim and final analysis   #if p<ainterim, trial successful at interim:   #if p2>afinal, trial unsuccessful at final analysis   #if p2<afinal, trial successful at final analysis   if(test>=ainterim){     return(c(g = FALSE, s = TRUE, n = ninterim))   }   if(test<ainterim){     if(mean(data2[data2$treat == 1,\"short\"]) < mean(data2[data2$treat == 2,\"short\"])){       return(c(g = FALSE, s = TRUE, n = ninterim))     } else {       if(test2>afinal){         return(c(g = FALSE, s = TRUE, n = n))       }       if(test2<afinal){         return(c(g = TRUE, s = FALSE, n = n))       }     }   } }  # For example, sim_trial() # Problem specification design_space <- design_space(lower = c(300,0.05,0,0),                               upper = c(700,0.5,1,1),                              sim = sim_trial)  hypotheses <- hypotheses(values = matrix(c(0.25, 0.25, 0.1, 0.1, 0,                                             0.25, 0.125, 0.1, 0.03, 0), ncol = 2),                          hyp_names = c(\"null\", \"alt\"),                          sim = sim_trial)  constraints <- constraints(name = c(\"TI_con\", \"TII_con\"),                    out = c(\"g\", \"s\"),                    hyp = c(\"null\", \"alt\"),                    nom = c(0.1, 0.2),                    delta =c(0.95, 0.95),                    binary = c(TRUE, TRUE))  objectives <- objectives(name = c(\"TI\", \"TII\", \"EN\"),                  out = c(\"g\", \"s\", \"n\"),                  hyp = c(\"null\", \"alt\", \"null\"),                  weight = c(100, 100, 1),                  binary = c(TRUE, TRUE, FALSE))  prob <- BOSSS_problem(sim_trial, design_space, hypotheses, objectives, constraints) # Initialisation size <- 40 N <- 500 sol <- BOSSS_solution(size, N, prob) print(sol)  #> Design variables for the Pareto set:  #>  #>         n  ninterim ainterim   afinal #> 2  600.00 0.1625000 0.750000 0.250000 #> 9  575.00 0.4156250 0.812500 0.187500 #> 13 625.00 0.3593750 0.437500 0.062500 #> 15 325.00 0.4718750 0.687500 0.312500 #> 22 587.50 0.2046875 0.718750 0.031250 #> 27 462.50 0.4578125 0.781250 0.093750 #> 35 418.75 0.2820313 0.859375 0.328125 #> 37 668.75 0.3382812 0.734375 0.203125 #> 39 368.75 0.4507813 0.484375 0.453125 #>  #> Corresponding objective function values...  #>  #>    g, null (mean) g, null (var) s, alt (mean) s, alt (var) n, null (mean) #> 2       -3.023783    0.04519900     -1.764057   0.01600202       227.7800 #> 9       -3.221373    0.05416146     -3.335521   0.06020906       356.6240 #> 13      -4.378391    0.16331377     -2.359280   0.02533537       304.2000 #> 15      -2.384886    0.02587913     -1.846444   0.01697650       203.9120 #> 22      -4.226834    0.14091644     -1.474557   0.01318541       280.8200 #> 27      -3.689289    0.08401554     -2.047467   0.01973883       295.0010 #> 35      -2.285558    0.02384669     -2.359280   0.02533537       232.2850 #> 37      -3.118117    0.04925661     -2.856301   0.03887797       366.7945 #> 39      -2.493162    0.02834157     -1.812902   0.01656951       201.6840 #>    n, null (var) #> 2       97.55297 #> 9       51.91310 #> 13      51.55944 #> 15      12.35437 #> 22      98.83823 #> 27      28.19656 #> 35      42.70572 #> 37      85.19774 #> 39      11.94706 #>  #> ...and constraint function values: #>  #>    g, null (mean) g, null (var) s, alt (mean) s, alt (var) #> 2       -3.023783    0.04519900     -1.764057   0.01600202 #> 9       -3.221373    0.05416146     -3.335521   0.06020906 #> 13      -4.378391    0.16331377     -2.359280   0.02533537 #> 15      -2.384886    0.02587913     -1.846444   0.01697650 #> 22      -4.226834    0.14091644     -1.474557   0.01318541 #> 27      -3.689289    0.08401554     -2.047467   0.01973883 #> 35      -2.285558    0.02384669     -2.359280   0.02533537 #> 37      -3.118117    0.04925661     -2.856301   0.03887797 #> 39      -2.493162    0.02834157     -1.812902   0.01656951 plot(sol) # Iterations N <- 500 for(i in 1:20) {   sol <- iterate(sol, prob, N)  } print(sol) #> Design variables for the Pareto set:  #>  #>           n  ninterim  ainterim     afinal #> 2  600.0000 0.1625000 0.7500000 0.25000000 #> 9  575.0000 0.4156250 0.8125000 0.18750000 #> 13 625.0000 0.3593750 0.4375000 0.06250000 #> 15 325.0000 0.4718750 0.6875000 0.31250000 #> 35 418.7500 0.2820313 0.8593750 0.32812500 #> 39 368.7500 0.4507813 0.4843750 0.45312500 #> 42 696.7668 0.4555916 0.3326731 0.01782676 #> 45 516.4745 0.4302293 0.3941854 0.16301852 #> 47 625.2480 0.4039887 0.4004877 0.18772294 #> 48 439.6051 0.3664093 0.8074256 0.28307692 #> 49 621.8103 0.4986784 0.3374450 0.11741606 #> 50 632.9055 0.4936170 0.5787490 0.35234491 #> 51 447.1385 0.2720656 0.6455986 0.16845326 #> 52 611.8022 0.4952288 0.4885986 0.22588945 #> 53 620.8031 0.4818502 0.1746389 0.04170175 #> 54 340.3914 0.3331821 0.7793364 0.31243737 #> 55 490.6632 0.4617599 0.6692496 0.36081964 #> 56 526.4137 0.3409052 0.4083777 0.08441566 #> 60 636.9130 0.4997090 0.2507842 0.07803600 #>  #> Corresponding objective function values...  #>  #>    g, null (mean) g, null (var) s, alt (mean) s, alt (var) n, null (mean) #> 2       -3.023783    0.04519900     -1.764057   0.01600202       227.7800 #> 9       -3.221373    0.05416146     -3.335521   0.06020906       356.6240 #> 13      -4.378391    0.16331377     -2.359280   0.02533537       304.2000 #> 15      -2.384886    0.02587913     -1.846444   0.01697650       203.9120 #> 35      -2.285558    0.02384669     -2.359280   0.02533537       232.2850 #> 39      -2.493162    0.02834157     -1.812902   0.01656951       201.6840 #> 42      -6.030685    0.83533640     -2.047467   0.01973883       364.0911 #> 45      -4.094751    0.12398289     -2.150157   0.02138823       265.5822 #> 47      -3.533378    0.07247929     -2.493162   0.02834157       318.4381 #> 48      -2.551256    0.02977855     -2.411048   0.02644954       252.9397 #> 49      -4.556303    0.19432705     -2.895870   0.04027675       344.2991 #> 50      -2.856301    0.03887797     -3.872426   0.10007918       374.8975 #> 51      -3.397487    0.06379365     -1.671131   0.01500043       211.0142 #> 52      -3.118117    0.04925661     -3.335521   0.06020906       366.4389 #> 53      -5.422544    0.45655261     -1.952320   0.01835923       320.8826 #> 54      -2.551256    0.02977855     -1.597971   0.01427917       181.6722 #> 55      -2.437794    0.02704859     -3.118117   0.04925661       299.5764 #> 56      -5.045842    0.31451121     -1.612318   0.01441616       227.6379 #> 60      -3.872426    0.10007918     -2.285558   0.02384669       362.0100 #>    n, null (var) #> 2       97.55297 #> 9       51.91310 #> 13      51.55944 #> 15      12.35437 #> 35      42.70572 #> 39      11.94706 #> 42      31.39490 #> 45      21.91272 #> 47      40.84945 #> 48      34.39271 #> 49      19.07493 #> 50      32.52114 #> 51      42.59428 #> 52      31.68524 #> 53      13.15239 #> 54      21.84288 #> 55      28.17529 #> 56      29.12191 #> 60      24.24545 #>  #> ...and constraint function values: #>  #>    g, null (mean) g, null (var) s, alt (mean) s, alt (var) #> 2       -3.023783    0.04519900     -1.764057   0.01600202 #> 9       -3.221373    0.05416146     -3.335521   0.06020906 #> 13      -4.378391    0.16331377     -2.359280   0.02533537 #> 15      -2.384886    0.02587913     -1.846444   0.01697650 #> 35      -2.285558    0.02384669     -2.359280   0.02533537 #> 39      -2.493162    0.02834157     -1.812902   0.01656951 #> 42      -6.030685    0.83533640     -2.047467   0.01973883 #> 45      -4.094751    0.12398289     -2.150157   0.02138823 #> 47      -3.533378    0.07247929     -2.493162   0.02834157 #> 48      -2.551256    0.02977855     -2.411048   0.02644954 #> 49      -4.556303    0.19432705     -2.895870   0.04027675 #> 50      -2.856301    0.03887797     -3.872426   0.10007918 #> 51      -3.397487    0.06379365     -1.671131   0.01500043 #> 52      -3.118117    0.04925661     -3.335521   0.06020906 #> 53      -5.422544    0.45655261     -1.952320   0.01835923 #> 54      -2.551256    0.02977855     -1.597971   0.01427917 #> 55      -2.437794    0.02704859     -3.118117   0.04925661 #> 56      -5.045842    0.31451121     -1.612318   0.01441616 #> 60      -3.872426    0.10007918     -2.285558   0.02384669 plot(sol)"},{"path":"https://dtwilson.github.io/BOSSS/articles/Examples.html","id":"pressure-2","dir":"Articles","previous_headings":"","what":"PRESSURE 2","title":"Examples","text":"PRESSURE 2 trial comparing different mattresses terms ability prevent development pressure ulcers, longitudinal data collected patient. Smith et al. (2021) suggested one way analyse data multi-state model, showed simulation used estimate power analysis. Herw extend approach searching optimal design. simulation deterministic functions : now construct problem encode want search total number patients, total number assessments assessment frequency. looking designs minimise numbers pattens assessments, whilst constraining type II error rate (probably) less 0.2 follow-length less 200.","code":"sim_P2 <- function(n = 500, fu = 60, af = 1,                     q12 = 0.05, q23 = 0.05, q34 = 0.03,                    b12 = 0.67, b23 = 0.67, b34 = 0.67){      # n: total number of patients   # fu: follow-up length (days)   # af: assemment frequency (days)   # q12, q23, q34: transition probabilities   # b12, b23, b34: treatment effects      # Calculate length of follow up   na <- n*floor(fu/af)      # Assessment times   as_times <- floor(seq(af, fu, af))      # Simulate numbers starting in each state   starts <- rep(1:3, times = rmultinom(1, n, c(0.15, 0.7, 0.15)))   # Randomly allocate treatment   trt <- rbinom(n, 1, 0.5)      # Simulate transitions into each remaining state   enter2 <- (starts == 1)*rexp(n, q12*exp(log(b12)*trt))   enter3 <- (starts != 3)*(enter2 + rexp(n, q23*exp(log(b23)*trt)))   enter4 <- (starts != 3)*enter3 + rexp(n, q34*exp(log(b34)*trt))      # Matrix of transition times into each state for each patient   enter_m <- matrix(c(enter2, enter3, enter4), ncol = 3)      # Add time of \"transitioning\" to the end of the follow-up period   enter_m <- cbind(enter_m, pmax(enter_m[,3], fu))   # Cap all times at length of follow-up   enter_m <- pmin(enter_m, fu)      # Ceiling all times, assuming assessment is at the start of the day    # and so any transitions after x.0 will be seen at (x+1).0   enter_m <- ceiling(enter_m)      # Translate into number of days spent in each state   times_m <- cbind(enter_m[,1],                     enter_m[,2] - enter_m[,1],                     enter_m[,3] - enter_m[,2],                    enter_m[,4] - enter_m[,3])    y <- t(apply(times_m, 1, function(x) rep(1:4, times = x)))      # Reshape to long   y <- melt(y)   colnames(y) <- c(\"id\", \"time\", \"state\")   y$trt <- trt[y$id]      # Keep observations on assessment times and order by patient   y <- y[y$time %in% as_times,]   y <- y[order(y$id),]      Q <- rbind ( c(0, 0.1, 0, 0),                 c(0, 0, 0.1, 0),                 c(0, 0, 0, 0.1),                 c(0, 0, 0, 0) )    # If msm returns an error we take this as a non-significant result   suppressWarnings(fit <- try({     msm(state ~ time, subject=id, data = y, qmatrix = Q,              covariates = ~ trt)   }, silent = TRUE))      if (class(fit) == \"try-error\") {     sig <- 0   } else {     # If not converged, will not return CIs     r1.67 <- hazard.msm(fit, cl = 1 - 0.0167)$trt     if(ncol(r1.67) != 3){       sig <- 0     } else {       sig1.67 <- sum(!(r1.67[,2] < 1 & r1.67[,3] > 1)) >= 3              r2.5 <- hazard.msm(fit, cl = 1 - 0.025)$trt       sig2.5 <- sum(!(r2.5[,2] < 1 & r2.5[,3] > 1)) >= 2              r5 <- hazard.msm(fit, cl = 1 - 0.05)$trt       sig5 <- sum(!(r5[,2] < 1 & r5[,3] > 1)) >= 1              sig <- any(c(sig1.67, sig2.5, sig5))     }   }   return(c(s = !sig)) }  det_P2 <- function(n = 500, fu = 60, af = 1,                     q12 = 0.05, q23 = 0.05, q34 = 0.03,                    b12 = 0.67, b23 = 0.67, b34 = 0.67){      na <- n*floor(fu/af)      return(c(n = n, a = na, f = fu)) }  sim_P2() design_space <- design_space(lower = c(50, 10, 1),                               upper = c(500, 60, 10),                              sim = sim_P2)  hypotheses <- hypotheses(values = matrix(c(0.05, 0.05, 0.03, 0.67, 0.67, 0.67), ncol = 1),                          hyp_names = c(\"alt\"),                          sim = sim_P2)  constraints <- constraints(name = c(\"a\"),                    out = c(\"s\"),                    hyp = c(\"alt\"),                    nom = c(0.2),                    delta =c(0.95),                    binary = c(TRUE))  objectives <- objectives(name = c(\"n\", \"a\", \"f\"),                  out = c(\"n\", \"a\", \"f\"),                  hyp = c(\"alt\", \"alt\", \"alt\"),                  weight = c(10, 1, 10),                  binary = c(FALSE, FALSE, FALSE))  prob <- BOSSS_problem(sim_P2, design_space, hypotheses, objectives, constraints, det_func = det_P2) size <- 30 N <- 500  sol <- BOSSS_solution(size, N, prob) print(sol)  #> Design variables for the Pareto set:  #>  #>           n      fu      af #> 9  359.3750 50.6250 8.31250 #> 11 246.8750 38.1250 1.56250 #> 13 415.6250 44.3750 4.93750 #> 17 317.1875 58.4375 4.09375 #> 18 429.6875 20.9375 1.84375 #> 21 485.9375 39.6875 9.71875 #> 26 457.8125 30.3125 3.53125 #> 29 401.5625 49.0625 6.90625 #>  #> Corresponding objective function values...  #>  #>    n, alt (mean) a, alt (mean) f, alt (mean) #> 9       359.3750      2156.250       50.6250 #> 11      246.8750      5925.000       38.1250 #> 13      415.6250      3325.000       44.3750 #> 17      317.1875      4440.625       58.4375 #> 18      429.6875      4726.562       20.9375 #> 21      485.9375      1943.750       39.6875 #> 26      457.8125      3662.500       30.3125 #> 29      401.5625      2810.938       49.0625 #>  #> ...and constraint function values: #>  #>    s, alt (mean) s, alt (var) #> 9      -2.818081   0.03757873 #> 11     -1.780150   0.01618577 #> 13     -2.936892   0.04178691 #> 17     -3.221373   0.05416146 #> 18     -1.732408   0.01564970 #> 21     -2.710611   0.03418256 #> 26     -2.437794   0.02704859 #> 29     -3.221373   0.05416146 plot(sol) N <- 500 for(i in 1:20) {   sol <- iterate(sol, prob, N)  } print(sol) #> Design variables for the Pareto set:  #>  #>           n       fu       af #> 9  359.3750 50.62500 8.312500 #> 11 246.8750 38.12500 1.562500 #> 14 303.1250 31.87500 2.687500 #> 18 429.6875 20.93750 1.843750 #> 34 230.0819 53.88707 6.759177 #> 38 199.7083 52.63788 3.515716 #> 39 368.6289 27.57863 3.947984 #> 42 476.0093 19.61557 2.193718 #> 43 233.1484 44.00125 4.014669 #> 46 466.5642 19.70490 1.971585 #> 47 426.7519 38.53797 9.637794 #> 49 464.0631 17.94535 1.257592 #>  #> Corresponding objective function values...  #>  #>    n, alt (mean) a, alt (mean) f, alt (mean) #> 9       359.3750      2156.250      50.62500 #> 11      246.8750      5925.000      38.12500 #> 14      303.1250      3334.375      31.87500 #> 18      429.6875      4726.562      20.93750 #> 34      230.0819      1610.573      53.88707 #> 38      199.7083      2795.917      52.63788 #> 39      368.6289      2211.773      27.57863 #> 42      476.0093      3808.074      19.61557 #> 43      233.1484      2331.484      44.00125 #> 46      466.5642      4199.077      19.70490 #> 47      426.7519      1280.256      38.53797 #> 49      464.0631      6496.883      17.94535 #>  #> ...and constraint function values: #>  #>    s, alt (mean) s, alt (var) #> 9      -2.818081   0.03757873 #> 11     -1.780150   0.01618577 #> 14     -1.448401   0.01297212 #> 18     -1.732408   0.01564970 #> 34     -1.732408   0.01564970 #> 38     -1.397322   0.01257317 #> 39     -1.435480   0.01286903 #> 42     -1.569679   0.01401522 #> 43     -1.597971   0.01427917 #> 46     -1.612318   0.01441616 #> 47     -1.474557   0.01318541 #> 49     -1.656207   0.01484864 plot(sol)"},{"path":"https://dtwilson.github.io/BOSSS/articles/Examples.html","id":"recruitment","dir":"Articles","previous_headings":"","what":"Recruitment","title":"Examples","text":"Now set problem using BOSSS helper functions. going look designs 3 40 sites, running 6 months 5 years.","code":"library(BOSSS)  sim_rec <- function(m=20, t=3,                      a=7, b=2, c=2, d=0.8,                      f=10, g=1,                      j=0.3, k=0.3, x=1, y=0.2)  {   # m - total number of sites to be set up   # t - time (in years) for recruitment   # a, b - hyperparameters for rec mean (gamma)   # c, d - hyperparameters for rec sd (gamma)   # f, g - hyperparameters for eta (gamma)   # j, k - hyperparameters for delta (normal)   # x, y - hyperparameters for sigma (gamma)    # Sample parameters from their priors   # Recruitment rate   alpha <- rgamma(1, (a/b)^2, scale = b^2/a)   beta <- rgamma(1, (c/d)^2, scale = d^2/c)   # Setup rate   eta <- rgamma(1, (f/g)^2, scale = g^2/f)   # Treatment effect   delta <- rnorm(1, j, k)   # Outcome sd   sigma <- rgamma(1, (x/y)^2, scale = y^2/x)      # True per year recruitment rates for each site   lambdas <- rgamma(m, alpha, scale=beta)      # Setup times   setup_ts <- cumsum(rexp(m, eta))      # For each site, simulate number recruited by end   rec_times <- pmax(t - setup_ts, 0)   ns <- rpois(m, lambdas*rec_times)      # Total recruited at final   end_n <- sum(ns)      # Cap at target recruitment   end_n <- min(end_n, 352)      # Power at analysis   pow <- power.t.test(n = end_n/2, delta = delta, sd = sigma)$power   pow      return(c(pr_tII = 1 - pow)) }  det_rec <- function(m=20, t=3,                      a=7, b=2, c=2, d=0.8,                      f=10, g=1,                      j=0.3, k=0.3, x=1, y=0.2) {   return(c(m = floor(m), t = t)) }   # For example, sim_rec() # Problem specification design_space <- design_space(lower = c(3,0.5),                               upper = c(40,5),                              sim = sim_rec)  hypotheses <- hypotheses(values = matrix(c(7, 2, 2, 0.8,                                             10, 1, 0.3, 0.3, 1, 0.2), ncol = 1),                          hyp_names = c(\"alt\"),                          sim = sim_rec)  constraints <- constraints(name = c(\"TII_ass\"),                    out = c(\"pr_tII\"),                    hyp = c(\"alt\"),                    nom = c(0.4),                    delta =c(0.95),                    binary = c(FALSE))  objectives <- objectives(name = c(\"Sites\", \"Time\"),                  out = c(\"m\", \"t\"),                  hyp = c( \"alt\", \"alt\"),                  weight = c(1, 10),                  binary = c(FALSE, FALSE))  prob <- BOSSS_problem(sim_rec, design_space, hypotheses, objectives, constraints, det_func = det_rec) size <- 20 N <- 500  sol <- BOSSS_solution(size, N, prob)  print(sol) plot(sol) for(i in 1:30) {   sol <- iterate(sol, prob, N)  }  print(sol) plot(sol)"},{"path":"https://dtwilson.github.io/BOSSS/articles/Examples.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Examples","text":"Croft J, Ainsworth G, Corrigan N, et al. NIFTy: near-infrared fluorescence (NIRF) imaging prevent postsurgical hypoparathyroidism (PoSH) thyroid surgery—phase II/III pragmatic, multicentre randomised controlled trial protocol patients undergoing total completion thyroidectomy. BMJ Open, 15:e092422 (2025). https://doi.org/10.1136/bmjopen-2024-092422 Nixon, Jane et al. Pressure Relieving Support Surfaces Pressure Ulcer Prevention (PRESSURE 2): Clinical Health Economic Results Randomised Controlled Trial. eClinicalMedicine, Volume 14, 42 - 52 (2019) Smith IL, Nixon JE, Sharples L. Power sample size multistate model analysis longitudinal discrete outcomes disease prevention trials. Statistics Medicine, 40: 1960–1971 (2021). https://doi.org/10.1002/sim.8882","code":"knitr::knit_exit()"},{"path":"https://dtwilson.github.io/BOSSS/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Duncan Wilson. Author, maintainer.","code":""},{"path":"https://dtwilson.github.io/BOSSS/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wilson D (2025). BOSSS: Bayesian Optimisation Simulation-based Sample Size. R package version 0.0.0.9000, https://dtwilson.github.io/BOSSS/.","code":"@Manual{,   title = {BOSSS: Bayesian Optimisation for Simulation-based Sample Size},   author = {Duncan Wilson},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://dtwilson.github.io/BOSSS/}, }"},{"path":"https://dtwilson.github.io/BOSSS/index.html","id":"bosss-","dir":"","previous_headings":"","what":"Bayesian Optimisation for Simulation-based Sample Size","title":"Bayesian Optimisation for Simulation-based Sample Size","text":"goal BOSSS help people use Bayesain optimisation solve sample size determination problems simulation required calculate operating characteristics.","code":""},{"path":"https://dtwilson.github.io/BOSSS/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Bayesian Optimisation for Simulation-based Sample Size","text":"can install development version BOSSS GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"DTWilson/BOSSS\")"},{"path":"https://dtwilson.github.io/BOSSS/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Bayesian Optimisation for Simulation-based Sample Size","text":"Suppose want design cluster randomised RCT compare mean outcomes two groups. need choose per-arm sample size nn per-arm number clusters kk, aiming minimise quantities whilst ensuring trial 90% power detect target difference. Suppose analytic power function problem, need use simulation estimate power instead. can make search process slow unwieldy. BOSSS helps using Bayesian optimisation carefully choose design evaluate iteration, aiming give improvement best designs found far. Key features: Trial design spaces can several dimensions. Multiple objectives handled non-scalarising way. Design optimisation problems can constrained deterministic stochastic funstion. output applying BOSSS problem set solutions satisfy power constraint offer range trade-offs different objectives minimising (, nn kk). example, consider following BOSSS_solution object resulted applying BOSSS algorithm: eight designs choose . example, final design set involves 419 patients 32 clusters arm. estimated power design 1−1/(1+exp(2.38))=0.921 - 1/(1 + \\exp(2.38)) = 0.92. can visualise trade-offs two objectives plotting solution:  detailed walkthrough specify solve problems BOSSS, see “Getting started” tab. applications collected “Examples” article.","code":"print(solution) #> Design variables for the Pareto set:  #>  #>           n        k #> 9  346.8750 41.18750 #> 13 408.1250 35.31250 #> 27 451.1951 28.36097 #> 28 334.7609 43.72750 #> 33 372.0348 37.45546 #> 36 499.9937 23.92778 #> 37 448.5287 29.46920 #> 38 418.5645 32.35209 #>  #> Corresponding objective function values...  #>  #>    n, alt (mean) k, alt (mean) #> 9       346.8750      41.18750 #> 13      408.1250      35.31250 #> 27      451.1951      28.36097 #> 28      334.7609      43.72750 #> 33      372.0348      37.45546 #> 36      499.9937      23.92778 #> 37      448.5287      29.46920 #> 38      418.5645      32.35209 #>  #> ...and constraint function values: #>  #>    s, alt (mean) s, alt (var) #> 9      -2.521850   0.02904061 #> 13     -2.359280   0.02533537 #> 27     -2.261940   0.02339297 #> 28     -2.087561   0.02036212 #> 33     -2.334207   0.02481645 #> 36     -2.193677   0.02214155 #> 37     -2.261940   0.02339297 #> 38     -2.384886   0.02587913 plot(solution)"},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_problem.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a BOSSS problem — BOSSS_problem","title":"Create a BOSSS problem — BOSSS_problem","text":"Create BOSSS problem","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_problem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a BOSSS problem — BOSSS_problem","text":"","code":"BOSSS_problem(   sim_trial,   design_space,   hypotheses,   objectives,   constraints = NULL,   det_func = NULL )"},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_problem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a BOSSS problem — BOSSS_problem","text":"sim_trial function generates single (possibly multivariate) Monte Carlo outcome design hypothesis. design_space data frame constructed via design_space(). hypotheses data frame constructed via hypotheses(). objectives data frame constructed via objectives(). constraints optional ata frame constructed via constraints(). det_func optional function generates deterministic outcomes design hypothesis.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_problem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a BOSSS problem — BOSSS_problem","text":"object class BOSSS_problem.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_solution.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an initial solution to a BOSSS problem — BOSSS_solution","title":"Create an initial solution to a BOSSS problem — BOSSS_solution","text":"Create initial solution BOSSS problem","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_solution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an initial solution to a BOSSS problem — BOSSS_solution","text":"","code":"BOSSS_solution(size, N, problem)"},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_solution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an initial solution to a BOSSS problem — BOSSS_solution","text":"size Number points used initialisation. N Number simulations used MC estimation. problem BOSSS problem solved.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/BOSSS_solution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an initial solution to a BOSSS problem — BOSSS_solution","text":"object class BOSSS_solution.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of constraints — constraints","title":"Create a set of constraints — constraints","text":"Create set constraints","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of constraints — constraints","text":"","code":"constraints(name, out, hyp, nom, delta, binary)"},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of constraints — constraints","text":"name character vector constraint names. character vector denoting simulation output constraint pertains . hyp character vector denoting hypothesis constraint pertains . nom numeric vector nominal upper limits. delta numeric vector probabilities. binary boolean vector denoting constraint output binary otherwise.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of constraints — constraints","text":"data.frame defining constraints.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/constraints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a set of constraints — constraints","text":"","code":"constraints(name = c(\"tII\"),             out = c(\"s\"),             hyp = c(\"alt\"),             nom = c(0.1),             delta = c(0.95),             binary = c(TRUE)) #>   name out hyp nom delta binary #> 1  tII   s alt 0.1  0.95   TRUE"},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a design space — design_space","title":"Create a design space — design_space","text":"Create design space","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a design space — design_space","text":"","code":"design_space(name = NULL, sim = NULL, lower, upper)"},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a design space — design_space","text":"name optional character vector design variable names. sim optional simulation function. lower numeric vector lower limits. upper numeric vector upper limits.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a design space — design_space","text":"data.frame defining design space.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/design_space.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a design space — design_space","text":"","code":"design_space(lower = c(10, 3),              upper = c(500, 50),              name = c(\"n\", \"k\")) #>   name lower upper #> 1    n    10   500 #> 2    k     3    50"},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_check_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical check — diag_check_point","title":"Empirical check — diag_check_point","text":"Empirical check","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_check_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical check — diag_check_point","text":"","code":"diag_check_point(design, problem, solution, N, current = NULL)"},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_check_point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical check — diag_check_point","text":"design Design evaluate. problem BOSSS problem. solution BOSSS solution. N Number simulations use computing Monte Carlo estimates. current optional matrix containing results previous check_point calls, built upon.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_check_point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical check — diag_check_point","text":"matrix row corresponds model BOSSS solution object, giving Monte Carlo estimates mean variance along side number simulations used compute .","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot one-dimensional model fits — diag_plots","title":"Plot one-dimensional model fits — diag_plots","text":"Plot one-dimensional model fits","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot one-dimensional model fits — diag_plots","text":"","code":"diag_plots(design, problem, solution, type = \"response\")"},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot one-dimensional model fits — diag_plots","text":"design Design centre plots . problem BOSSS problem. solution BOSSS solution. type type prediction required binary outcomes. default scale response variable (\"response\"); scale linear predictor (\"link\") can used instead.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot one-dimensional model fits — diag_plots","text":"list plots size (# models) x (# design variables).","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Examine model predictions — diag_predictions","title":"Examine model predictions — diag_predictions","text":"Examine model predictions","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Examine model predictions — diag_predictions","text":"","code":"diag_predictions(problem, solution, type = \"response\")"},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_predictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Examine model predictions — diag_predictions","text":"problem BOSSS problem. solution BOSSS solution. type type prediction required binary outcomes. default scale response variable (\"response\"); scale linear predictor (\"link\") can used instead.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/diag_predictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Examine model predictions — diag_predictions","text":"list dataframes, one model, giving empirical (Monte Carlo) point interval estimates alongside predicted point interval estimates, flagging agree.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/extend_initial.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend the initial set of design evaluations — extend_initial","title":"Extend the initial set of design evaluations — extend_initial","text":"Extend initial set design evaluations","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/extend_initial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend the initial set of design evaluations — extend_initial","text":"","code":"extend_initial(problem, solution, extra_N = 0, extra_points = 0)"},{"path":"https://dtwilson.github.io/BOSSS/reference/extend_initial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend the initial set of design evaluations — extend_initial","text":"problem BOSSS problem. solution current BOSSS solution. extra_N number extra simulations run exisiting designs. extra_points number new design points add.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/extend_initial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend the initial set of design evaluations — extend_initial","text":"updated BOSSS solution object","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of hypotheses — hypotheses","title":"Create a set of hypotheses — hypotheses","text":"Create set hypotheses","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of hypotheses — hypotheses","text":"","code":"hypotheses(par_name = NULL, sim = NULL, values, hyp_names)"},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of hypotheses — hypotheses","text":"par_name optional character vector model parameter names. sim optional simulation function. values numeric matrix, column giving model parameter values specific hypothesis. hyp_names character vector hypothesis names.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of hypotheses — hypotheses","text":"data.frame defining hypotheses.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/hypotheses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a set of hypotheses — hypotheses","text":"","code":"hypotheses(values = matrix(c(0.3, 0.05, 0.95), ncol = 1),            hyp_names = c(\"alt\"),            par_name = c(\"mu\", \"var_u\", \"var_e\")) #>        alt #> mu    0.30 #> var_u 0.05 #> var_e 0.95"},{"path":"https://dtwilson.github.io/BOSSS/reference/iterate.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform one iteration of Bayesian optimisation — iterate","title":"Perform one iteration of Bayesian optimisation — iterate","text":"Perform one iteration Bayesian optimisation","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/iterate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform one iteration of Bayesian optimisation — iterate","text":"","code":"iterate(solution, problem, N, design = NULL)"},{"path":"https://dtwilson.github.io/BOSSS/reference/iterate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform one iteration of Bayesian optimisation — iterate","text":"solution current BOSSS solution. problem BOSSS problem. N number simulations use computing Monte Carlo estimates. design optional vector design space evaluated. left NULL, optimal design sought.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/iterate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform one iteration of Bayesian optimisation — iterate","text":"updated BOSSS solution object.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a set of objectives — objectives","title":"Create a set of objectives — objectives","text":"Create set objectives","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a set of objectives — objectives","text":"","code":"objectives(name, out, hyp, weight, binary = NULL)"},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a set of objectives — objectives","text":"name character vector objective names. character vector denoting simulation output objective pertains . hyp character vector denoting hypothesis objective pertains . weight numeric vector weights assigned objective. binary optional boolean vector denoting output objective function binary (TRUE) continuous (FALSE).","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a set of objectives — objectives","text":"data.frame defining objectives.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/objectives.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a set of objectives — objectives","text":"","code":"objectives(name = c(\"min_n\", \"min_k\"),                      out = c(\"n\", \"k\"),                      hyp = c(\"alt\", \"alt\"),                      weight = c(10, 1)) #>    name out hyp weight #> 1 min_n   n alt     10 #> 2 min_k   k alt      1"},{"path":"https://dtwilson.github.io/BOSSS/reference/plot.BOSSS_solution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","title":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","text":"Plot Pareto front BOSSS solution","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/plot.BOSSS_solution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","text":"","code":"# S3 method for class 'BOSSS_solution' plot(x, y, ...)"},{"path":"https://dtwilson.github.io/BOSSS/reference/plot.BOSSS_solution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","text":"x BOSSS solution. y used. ... arguments method.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/plot.BOSSS_solution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the Pareto front of a BOSSS solution — plot.BOSSS_solution","text":"ggplot object two- three-dimension Pareto fronts.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/print.BOSSS_solution.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","title":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","text":"Print Pareto set BOSSS solution","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/print.BOSSS_solution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","text":"","code":"# S3 method for class 'BOSSS_solution' print(x, ...)"},{"path":"https://dtwilson.github.io/BOSSS/reference/print.BOSSS_solution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","text":"x BOSSS solution. ... arguments method.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/print.BOSSS_solution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the Pareto set of a BOSSS solution — print.BOSSS_solution","text":"data.frame containing Pareto set corresponding (unweighted) objective values.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/sensitivity.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a one-dimensional sensitivity analysis — sensitivity","title":"Run a one-dimensional sensitivity analysis — sensitivity","text":"Run one-dimensional sensitivity analysis","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/sensitivity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a one-dimensional sensitivity analysis — sensitivity","text":"","code":"sensitivity(sa_hypothesis, design, problem, solution, num_eval = 20, N = 100)"},{"path":"https://dtwilson.github.io/BOSSS/reference/sensitivity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a one-dimensional sensitivity analysis — sensitivity","text":"sa_hypothesis Data frame defining SA variable bounds design Design tested problem BOSSS problem solution BOSSS solution num_eval Number points evaluate N Number MC samples use evaluation","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/sensitivity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a one-dimensional sensitivity analysis — sensitivity","text":"matrix estimated means variances simulation output SA variable range.","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/update_constraint.html","id":null,"dir":"Reference","previous_headings":"","what":"Update problem constraints — update_constraint","title":"Update problem constraints — update_constraint","text":"Update problem constraints","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/update_constraint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update problem constraints — update_constraint","text":"","code":"update_constraint(   problem,   number = NULL,   name = NULL,   nom = NULL,   delta = NULL )"},{"path":"https://dtwilson.github.io/BOSSS/reference/update_constraint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update problem constraints — update_constraint","text":"problem BOSSS problem number index constraint(s) updated name name constraint(s) updated nom new nominal value(s) delta new acceptance threshold(s)","code":""},{"path":"https://dtwilson.github.io/BOSSS/reference/update_constraint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update problem constraints — update_constraint","text":"updated BOSSS problem object.","code":""},{"path":"https://dtwilson.github.io/BOSSS/news/index.html","id":"bosss-development-version","dir":"Changelog","previous_headings":"","what":"BOSSS (development version)","title":"BOSSS (development version)","text":"Initial CRAN submission.","code":""}]
